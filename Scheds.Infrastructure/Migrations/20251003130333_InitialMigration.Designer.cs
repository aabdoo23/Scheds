// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scheds.Infrastructure.Contexts;

#nullable disable

namespace Scheds.Infrastructure.Migrations
{
    [DbContext(typeof(SchedsDbContext))]
    [Migration("20251003130333_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Scheds.Domain.Entities.CardItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Credits")
                        .HasColumnType("float");

                    b.Property<string>("Instructor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SeatsLeft")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("CardItems");
                });

            modelBuilder.Entity("Scheds.Domain.Entities.CartSeatModeration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CartSeatModerations");
                });

            modelBuilder.Entity("Scheds.Domain.Entities.CourseBase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CourseBases");
                });

            modelBuilder.Entity("Scheds.Domain.Entities.CourseSchedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CardItemId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("CourseSchedules");
                });

            modelBuilder.Entity("Scheds.Domain.Entities.Instructor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Scheds.Domain.Entities.ScheduleGeneration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientIpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ConsideredZeroSeats")
                        .HasColumnType("bit");

                    b.Property<string>("DaysEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DaysStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEngineering")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNumberOfDaysSelected")
                        .HasColumnType("bit");

                    b.Property<int>("LargestAllowedGap")
                        .HasColumnType("int");

                    b.Property<int>("MinimumNumberOfItemsPerDay")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSchedulesGenerated")
                        .HasColumnType("int");

                    b.Property<string>("SelectedDaysJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UsedLiveData")
                        .HasColumnType("bit");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleGenerations");
                });

            modelBuilder.Entity("Scheds.Domain.Entities.SeatModeration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("SeatModerations");
                });

            modelBuilder.Entity("Scheds.Domain.Entities.SelectedCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduleGenerationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleGenerationId");

                    b.ToTable("SelectedCourses");
                });

            modelBuilder.Entity("Scheds.Domain.Entities.SelectedCustomCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomMainSection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomProfessor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomSubSection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomTA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScheduleGenerationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleGenerationId");

                    b.ToTable("SelectedCustomCourses");
                });

            modelBuilder.Entity("Scheds.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserSeatModerations", b =>
                {
                    b.Property<string>("SeatModerationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SeatModerationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSeatModerations");
                });

            modelBuilder.Entity("Scheds.Domain.Entities.CartSeatModeration", b =>
                {
                    b.HasOne("Scheds.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Scheds.Domain.Entities.CourseSchedule", b =>
                {
                    b.HasOne("Scheds.Domain.Entities.CardItem", "CardItem")
                        .WithMany("CourseSchedules")
                        .HasForeignKey("CardItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardItem");
                });

            modelBuilder.Entity("Scheds.Domain.Entities.SelectedCourse", b =>
                {
                    b.HasOne("Scheds.Domain.Entities.ScheduleGeneration", "ScheduleGeneration")
                        .WithMany("SelectedCourses")
                        .HasForeignKey("ScheduleGenerationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleGeneration");
                });

            modelBuilder.Entity("Scheds.Domain.Entities.SelectedCustomCourse", b =>
                {
                    b.HasOne("Scheds.Domain.Entities.ScheduleGeneration", "ScheduleGeneration")
                        .WithMany("SelectedCustomCourses")
                        .HasForeignKey("ScheduleGenerationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleGeneration");
                });

            modelBuilder.Entity("UserSeatModerations", b =>
                {
                    b.HasOne("Scheds.Domain.Entities.SeatModeration", null)
                        .WithMany()
                        .HasForeignKey("SeatModerationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scheds.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Scheds.Domain.Entities.CardItem", b =>
                {
                    b.Navigation("CourseSchedules");
                });

            modelBuilder.Entity("Scheds.Domain.Entities.ScheduleGeneration", b =>
                {
                    b.Navigation("SelectedCourses");

                    b.Navigation("SelectedCustomCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
