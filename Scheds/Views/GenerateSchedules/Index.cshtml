@using Scheds.Models
@model Scheds.Models.GenerateAndResultViewModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generate Schedules - Scheds</title>
    <link rel="stylesheet" href="~/css/styles.css">
</head>

<body>
    <!-- Navbar -->
    <nav class="navbar">
        <div class="logo">
            <a href="#"><img src="~/images/logo.png" alt="Scheds Logo" class="logo-img"></a>
        </div>
        <ul class="nav-links">
            <li><a href="/">Home</a></li>
            <li><a href="/GenerateSchedules">Generate Schedules</a></li>
            <li><a href="/FindStudyRooms">Find Study Rooms</a></li>
        </ul>
    </nav>

    <!-- Generate Schedules Page -->
    <div class="Container">
        <!-- Search and Cart Section -->
        <section class="search-cart">
            <div class="search-section">
                <h1>Search for Courses</h1>
                <div class="search-bar">
                    <div class="group">
                        <svg class="icon" aria-hidden="true" viewBox="0 0 24 24">
                            <g>
                                <path
                                    d="M21.53 20.47l-3.66-3.66C19.195 15.24 20 13.214 20 11c0-4.97-4.03-9-9-9s-9 4.03-9 9 4.03 9 9 9c2.215 0 4.24-.804 5.808-2.13l3.66 3.66c.147.146.34.22.53.22s.385-.073.53-.22c.295-.293.295-.767.002-1.06zM3.5 11c0-4.135 3.365-7.5 7.5-7.5s7.5 3.365 7.5 7.5-3.365 7.5-7.5 7.5-7.5-3.365-7.5-7.5z">
                                </path>
                            </g>
                        </svg>
                        @* <input placeholder="Search" type="search" class="input"> *@
                        <input id="course-search" placeholder="Search" type="search" class="input">

                    </div>

                    @* <button id="add-to-cart" class="btn-primary">Add to Cart</button> *@
                </div>
                <div id="search-results" class="search-results">

                </div>
            </div>
            <div id="cart">
                <h2>Your Cart</h2>
                <ul id="cart-items"></ul>
            </div>
        </section>



        <section class="customization">
            <h2>Customize Your Schedule</h2>
            <div class="customization-layout">
                <form id="generate-form">

                    <!-- Sliders Section -->
                    <div class="sliders">
                        <div class="box">
                            <label class="slider-label">Minimum Slots per Day</label>
                            <div class="inner-box">
                                <div class="line"></div>
                                <input type="range" name="minimumNumberOfItemsPerDay" class="input-range" min="0"
                                    max="4" value="0" />
                            </div>
                            <p class="number">0</p>
                        </div>

                        <div class="box">
                            <label class="slider-label">Maximum Gap Period (hours)</label>
                            <div class="inner-box">
                                <div class="line"></div>
                                <input type="range" name="largestAllowedGap" class="input-range" min="0" max="6"
                                    value="0" />
                            </div>
                            <p class="number">0</p>
                        </div>

                        <div class="box">
                            <label class="slider-label">Maximum Number of Schedules</label>
                            <div class="inner-box">
                                <div class="line"></div>
                                <input type="range" name="maxNumberOfGeneratedSchedules" class="input-range" min="0"
                                    max="500" value="0" />
                            </div>
                            <p class="number">0</p>
                        </div>

                        <div class="box">
                            <label class="slider-label">Maximum Days on Campus</label>
                            <div class="inner-box">
                                <div class="line"></div>
                                <input type="range" name="numberOfDays" class="input-range" min="0" max="6" value="0" />
                            </div>
                            <p class="number">0</p>
                        </div>
                    </div>

                    <!-- Checkboxes Section -->
                    <div class="checkboxes">
                        <!-- First Checkbox Group -->
                        <div class="checkbox-group">
                            <h3>Select Days on Campus:</h3>
                            <label><input type="checkbox" name="selectedDays" value="all"> All Week</label>
                            <label><input type="checkbox" name="selectedDays" value="sunday"> Sunday</label>
                            <label><input type="checkbox" name="selectedDays" value="monday"> Monday</label>
                            <label><input type="checkbox" name="selectedDays" value="tuesday"> Tuesday</label>
                            <label><input type="checkbox" name="selectedDays" value="wednesday"> Wednesday</label>
                            <label><input type="checkbox" name="selectedDays" value="thursday"> Thursday</label>
                            <label><input type="checkbox" name="selectedDays" value="friday"> Friday</label>
                            <label><input type="checkbox" name="selectedDays" value="saturday"> Saturday</label>
                        </div>

                        <!-- Second Checkbox Group -->
                        <div class="checkbox-group">
                            <h3>Select First Slot Time:</h3>
                            <label><input type="radio" name="daysStart" value="830"> 8:30 AM</label>
                            <label><input type="radio" name="daysStart" value="1030"> 10:30 AM</label>
                            <label><input type="radio" name="daysStart" value="1230"> 12:30 PM</label>
                            <label><input type="radio" name="daysStart" value="1430"> 2:30 PM</label>
                        </div>

                        <!-- Third Checkbox Group -->
                        <div class="checkbox-group">
                            <h3>Select Last Slot Time:</h3>
                            <label><input type="checkbox" name="daysEnd" value="1230"> 12:30 PM</label>
                            <label><input type="checkbox" name="daysEnd" value="1430"> 2:30 PM</label>
                            <label><input type="checkbox" name="daysEnd" value="1630"> 4:30 PM</label>
                            <label><input type="checkbox" name="daysEnd" value="1830"> 6:30 PM</label>
                        </div>
                    </div>

            <button id="generate-schedule" class="btn-primary" type="submit">Generate Schedule</button>
            </form>
        </section>

        <!-- Generated Schedules Section -->
        <section class="generated-schedules">
            <h2>Generated Schedules</h2>
            <div id="schedule-container" class="schedule-container">
            </div>
        </section>
    </div>


    <script>
        let cart = [];

        document.addEventListener('DOMContentLoaded', () => {
            fetch('/api/coursebase/getAllCourses')
                .then(response => response.json())
                .then(courses => {
                    const searchInput = document.getElementById('course-search');
                    searchInput.addEventListener('input', () => {
                        const query = searchInput.value.toLowerCase();
                        const filteredCourses = courses.filter(course =>
                            course.courseName.toLowerCase().includes(query) ||
                            course.courseCode.toLowerCase().includes(query)
                        );
                        updateSearchResults(filteredCourses);
                    });
                })
                .catch(error => console.error('Error fetching courses:', error));

            // Fetch the cart items from the backend
            fetch('/api/cart/getCartItems')
                .then(response => response.json())
                .then(cartItems => {
                    console.log(cartItems);
                    cart = cartItems; // Store full course objects in the cart array
                    cart.forEach(course => updateCartUI(course));
                })
                .catch(error => console.error('Error fetching cart items:', error));


        });

        function updateSearchResults(courses) {
            const resultsContainer = document.getElementById('search-results');
            resultsContainer.innerHTML = ''; // Clear previous results

            courses.forEach(course => {
                const resultItem = document.createElement('div');
                resultItem.classList.add('search-result-item');

                resultItem.innerHTML = `
                <p><strong>${course.courseCode}: ${course.courseName}</strong></p>
            `;

                resultItem.addEventListener('click', () => {
                    addToCart(course);
                });

                resultsContainer.appendChild(resultItem);
            });
        }

        function addToCart(course) {
            if (!cart.some(c => c.courseCode === course.courseCode)) {
                cart.push(course); // Add full course object to cart

                // Call backend to store in C# List
                fetch('/api/cart/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(course)
                });

                // Update the cart UI
                updateCartUI(course);
            }
        }

        function updateCartUI(course) {
            const cartItemsContainer = document.getElementById('cart-items');

            const cartItem = document.createElement('li');
            cartItem.classList.add('cart-item');
            cartItem.innerHTML = `<p><strong>${course.courseCode}: ${course.courseName}</strong></p>`;

            // Remove from cart on click
            cartItem.addEventListener('click', () => removeFromCart(course, cartItem));

            cartItemsContainer.appendChild(cartItem);
        }

        function removeFromCart(course, cartItem) {
            const index = cart.findIndex(c => c.courseCode === course.courseCode); // Match by courseCode
            if (index > -1) {
                cart.splice(index, 1); // Remove from cart array

                // Call backend to remove from C# List
                fetch('/api/cart/remove', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(course)
                });

                // Remove the cart item from UI
                cartItem.remove();
            }
        }

        document.getElementById('generate-form').addEventListener('submit', function (event) {
            event.preventDefault(); // Prevent form submission

            // Capture form data
            const form = event.target;
            const selectedDays = Array.from(form.querySelectorAll('input[name="selectedDays"]:checked')).map(el => el.value);
            const daysStart = form.querySelector('input[name="daysStart"]:checked')?.value || '';
            const daysEnd = form.querySelector('input[name="daysEnd"]:checked')?.value || '';
            const minimumNumberOfItemsPerDay = form.minimumNumberOfItemsPerDay.value;
            const largestAllowedGap = form.largestAllowedGap.value;
            const maxNumberOfGeneratedSchedules = form.maxNumberOfGeneratedSchedules.value;
            const numberOfDays = form.numberOfDays.value;

            // Assuming selectedItems and customSelectedItems will be managed elsewhere
            const selectedItems = cart;
            const customSelectedItems = [];
            console.log(selectedItems);
            // Construct the GenerateRequest object
            const generateRequest = {
                selectedDays,
                daysStart,
                daysEnd,
                minimumNumberOfItemsPerDay: parseInt(minimumNumberOfItemsPerDay),
                largestAllowedGap: parseInt(largestAllowedGap),
                maxNumberOfGeneratedSchedules: parseInt(maxNumberOfGeneratedSchedules),
                numberOfDays: parseInt(numberOfDays),
                selectedItems,
                customSelectedItems
            };

            // URL for the fetch call
            const url = '/api/generate';

            // Make the AJAX POST request
            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(generateRequest)
            })
                .then(response => response.text()) // Expect HTML response
                .then(html => {
                    // Inject the returned HTML into the page
                    document.getElementById('schedule-container').innerHTML = html;
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                });
        });




    </script>


    <script>
        document.querySelectorAll('.box').forEach(box => {
            const input_range = box.querySelector('.input-range');
            const number = box.querySelector('.number');
            const line = box.querySelector('.line');
            const max_value = input_range.max;

            input_range.addEventListener('input', () => {
                const value = input_range.value;
                number.innerHTML = value;
                line.style.width = (value / max_value) * 100 + '%';
            });
        });

    </script>
</body>

</html>

<style>
    .search-section {
        background-color: #f9f9f9;
        height: 400px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        position: relative;
        width: 60%;
        margin-right: 20px;
        padding: 20px;
    }

    .search-bar {
        margin-bottom: 15px;
    }

    .search-results {
        background-color: #f9f9f9;
        max-height: 280px;
        overflow-y: auto;
        padding: 10px;
        border-radius: 5px;
    }

    .search-result-item {
        background-color: #ff6347;
        /* Blue background for individual result div */
        color: white;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 5px;
        width: 100%;
        cursor: pointer;
        /* Full width */
        box-sizing: border-box;
        font-size: 1.1rem;
    }

    .search-result-item p {
        margin: 0;
        font-size: 1rem;
    }

    .search-results::-webkit-scrollbar {
        width: 8px;
    }

    .search-results::-webkit-scrollbar-thumb {
        background-color: #ff6347;
        /* Custom scrollbar color */
        border-radius: 10px;
    }

    /* Cart Section with the same style as search results */
    #cart {
        background-color: #f9f9f9;
        /* Match the background with search-section */
        max-height: 400px;
        /* Limit height similar to search results */
        overflow-y: auto;
        padding: 20px;

        border-radius: 10px;
        /* Same border radius */
    }

    /* Cart item with the same look and feel as search result items */
    .cart-item {
        background-color: #ff6347;
        /* Match the search result item color */
        color: white;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 5px;
        width: 100%;
        /* Full width like search result items */
        cursor: pointer;
        box-sizing: border-box;
        font-size: 1.1rem;
    }

    .cart-item p {
        margin: 0;
        font-size: 1rem;
    }

    /* Custom scrollbar for the cart section */
    #cart::-webkit-scrollbar {
        width: 8px;
    }

    #cart::-webkit-scrollbar-thumb {
        background-color: #ff6347;
        /* Match the scrollbar thumb with search result color */
        border-radius: 10px;
    }

    #cart-items {
        padding: 0;
    }

    /* Hover effect for cart items */
    .cart-item:hover {
        background-color: #ff8367;
    }


    #all-schedules {
        background-color: #f9f9f9;
        /* Match the background with search-section */
        overflow-y: auto;
        padding: 20px;
        border-radius: 10px;
        /* Same border radius */
    }
</style>