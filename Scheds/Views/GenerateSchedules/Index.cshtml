@using Scheds.Domain.Entities
@model Scheds.Domain.ViewModels.GenerateAndResultViewModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scheds - Generate Schedules</title>
    <link rel="stylesheet" href="~/css/styles.css">
    <link rel="icon" type="image/png" href="~/images/abdo.png">
</head>

<body>
    @await Html.PartialAsync("_NavbarPartial")

    <!-- Generate Schedules Page -->
    <div class="Container">
        <!-- Search and Cart Section -->
        <section class="search-cart">
            <div class="search-section">
                <div style="display: flex; flex-direction: row; vertical-align:middle; gap: 10px;">
                    <h1>Search for Courses</h1>
                    <label style="margin-top: 5px; font-weight: 600; color:var(--dark-text)"><input type="checkbox"
                            name="isLiveData" checked>
                        Use Live Data in course selection</label>
                    <div class="tooltip" style="margin-top: 5px;">
                        <div class="icon">i</div>
                        <div class="tooltiptext">Fetches data for each course on selection from Self Service to
                            <strong>ensure data is updated and all sections are there.</strong> Small delay.
                        </div>
                    </div>
                </div>
                <div class="search-bar" style="margin-right: 20px;">
                    <div class="group">
                        <svg class="icon" aria-hidden="true" viewBox="0 0 24 24">
                            <g>
                                <path
                                    d="M21.53 20.47l-3.66-3.66C19.195 15.24 20 13.214 20 11c0-4.97-4.03-9-9-9s-9 4.03-9 9 4.03 9 9 9c2.215 0 4.24-.804 5.808-2.13l3.66 3.66c.147.146.34.22.53.22s.385-.073.53-.22c.295-.293.295-.767.002-1.06zM3.5 11c0-4.135 3.365-7.5 7.5-7.5s7.5 3.365 7.5 7.5-3.365 7.5-7.5 7.5-7.5-3.365-7.5-7.5z">
                                </path>
                            </g>
                        </svg>
                        @* <input placeholder="Search" type="search" class="input"> *@
                        <input id="course-search" placeholder="Search" type="search" class="input">
                        <div id="loading" style="display: none; font-weight: 600;">
                            <div class="loader"></div>
                            Loading... Please wait.
                        </div>

                    </div>

                    <button id="add-to-cart" class="btn-primary">Search Live</button>
                    <div class="tooltip" style="margin-bottom: 20px;">
                        <div class="icon">i</div>
                        <div class="tooltiptext">If you can't find the course you're searching for in the autocomplete,
                            click this button.</div>
                    </div>
                </div>
                <div id="search-results" class="search-results">

                </div>
            </div>
            <div id="cart">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                    <h2 style="color:var(--light-text); margin: 0;">Your Courses</h2>
                    <button id="clear-cart" class="clear-cart-btn">
                        Clear Cart
                    </button>
                </div>
                <ul id="cart-items"></ul>
            </div>
        </section>



        <section class="customization">
            <div class="top-section">
                <h2 class="top-section-text">Customize Your Schedule</h2>
            </div>

            <div class="customization-layout">
                <!-- Sliders Section -->
                <div class="sliders">
                    <div class="box">
                        <label class="slider-label">Minimum Slots per Day</label>
                        <div class="inner-box">
                            <div class="line"></div>
                            <input id="minimumNumberOfItemsPerDay" type="range" name="minimumNumberOfItemsPerDay"
                                class="input-range" min="0" max="4" value="0" />
                        </div>
                        <p id="minimumNumberOfItemsPerDayValue" class="number">0</p>
                    </div>

                    <div class="box">
                        <label class="slider-label">Maximum Gap Period (hours)</label>
                        <div class="inner-box">
                            <div class="line"></div>
                            <input type="range" name="largestAllowedGap" class="input-range" min="0" max="6"
                                value="4" />
                        </div>
                        <p id="largestAllowedGapValue" class="number">4</p>
                    </div>

                    <div class="box">
                        <label class="slider-label">Maximum Number of Schedules</label>
                        <div class="inner-box">
                            <div class="line"></div>
                            <input type="range" name="maxNumberOfGeneratedSchedules" class="input-range" min="1"
                                max="30" value="20" />
                        </div>
                        <p id="maxNumberOfGeneratedSchedulesValue" class="number">20</p>
                    </div>
                    <div class="box" style="height: 20px; justify-content:flex-start;">
                        <label style="font-weight: 600; color:var(--light-text); margin-left: 0px;"><input
                                type="checkbox" name="isEngineering">Check this if you're an Engineering
                            student.</label>
                        <div class="tooltip" style="margin-bottom: 20px;">
                            <div class="icon">i</div>
                            <div class="tooltiptext">This considers different sections of labs and tutorials together.
                                For example: if a course needs a lab and a tutorial to be considered together, then when
                                considering lecture 1, it will consider lab 1A and tutorial 1B together, etc. which is
                                not normal for cs students for example.</div>
                        </div>
                    </div>
                </div>

                <div class="right-section">
                    <!-- Checkboxes Section -->
                    <div class="checkboxes right-section-header" style="margin-top: 10px;">
                        <div class="customization-method" style="font-weight: 700;">
                            <h3>Pick your day customization method</h3>
                            <label>
                                <input type="radio" name="scheduleMethod" value="maxDays" checked> Pick max number of
                                days
                            </label>
                            <label>
                                <input type="radio" name="scheduleMethod" value="selectDays"> Select Specific Days
                            </label>
                        </div>

                        <div class="sliders" id="slider-section">
                            <div class="box" style="margin: 0;">
                                <label class="slider-label">Maximum Days on Campus</label>
                                <div class="inner-box">
                                    <div class="line"></div>
                                    <input type="range" id="numberOfDaysRange" name="numberOfDays" class="input-range"
                                        min="0" max="6" value="6" />
                                </div>
                                <p id="numberOfDaysValue" class="number">6</p>
                            </div>
                        </div>
                        <script>
                            const rangeInput = document.getElementById('numberOfDaysRange');
                            const valueDisplay = document.getElementById('numberOfDaysValue');

                            rangeInput.addEventListener('input', function () {
                                valueDisplay.textContent = this.value;
                            });
                        </script>

                        <!-- Checkboxes Section -->
                        <div class="checkboxes" id="checkbox-section"
                            style="display: none; width: 90%; margin: 0; box-shadow: 0 4px 8px rgba(255, 255, 255, 0.1);">
                            <div class="checkbox-group">
                                <h3>Select Days on Campus</h3>
                                <label><input type="checkbox" name="selectedDays" value="all" id="all-days"> All
                                    Week</label>
                                <label><input type="checkbox" name="selectedDays" value="Saturday"> Saturday</label>
                                <label><input type="checkbox" name="selectedDays" value="Sunday"> Sunday</label>
                                <label><input type="checkbox" name="selectedDays" value="Monday"> Monday</label>
                                <label><input type="checkbox" name="selectedDays" value="Tuesday"> Tuesday</label>
                                <label><input type="checkbox" name="selectedDays" value="Wednesday"> Wednesday</label>
                                <label><input type="checkbox" name="selectedDays" value="Thursday"> Thursday</label>
                            </div>
                        </div>
                    </div>

                    <div class="checkboxes" style="margin-top: 0;">
                        <div class="checkbox-group">
                            <h3>Select First Slot Start Time</h3>
                            <label><input type="radio" name="daysStart" value="08:30" checked> 8:30 AM</label>
                            <label><input type="radio" name="daysStart" value="10:30"> 10:30 AM</label>
                            <label><input type="radio" name="daysStart" value="12:30"> 12:30 PM</label>
                            <label><input type="radio" name="daysStart" value="14:30"> 2:30 PM</label>
                            <label><input type="radio" name="daysStart" value="16:30"> 4:30 PM</label>
                        </div>

                        <div class="checkbox-group">
                            <h3>Select Last Slot End Time</h3>
                            <label><input type="radio" name="daysEnd" value="12:30"> 12:30 PM</label>
                            <label><input type="radio" name="daysEnd" value="14:30"> 2:30 PM</label>
                            <label><input type="radio" name="daysEnd" value="16:30"> 4:30 PM</label>
                            <label><input type="radio" name="daysEnd" value="18:30"> 6:30 PM</label>
                            <label><input type="radio" name="daysEnd" value="20:30" checked> 8:30 PM</label>
                        </div>
                    </div>
                </div>

            </div>
            <button id="generate-schedule" class="btn-primary"
                style="width: 100%; background-color:var(--light-blue); font-size: 20px; padding: 15px;">
                Generate Schedules
            </button>
            <h3 id="generate-loading" style="text-align-last: center; color:var(--light-text); display: none;">Working
                the magic, please wait...<br>
                Don't panic it's not stuck, it's just amazed by your choices.</h3>
        </section>



        <!-- Generated Schedules Section -->
        <section class="generated-schedules">
            <div style="display: flex; flex-direction: row;">
                <h2>Generated Schedules</h2>
                <div class="tooltip" style="margin-bottom: 0px;">
                    <div class="icon">i</div>
                    <div class="tooltiptext">If you can't see a course selected above, then it probably has no schedule.
                        If not sure, search for the course using the Search live button and try again. If all fails,
                        report it in the form in the main page, bottom right.</div>
                </div>
            </div>
            <div id=schedule-container class="schedule-container">
                <h3>Click "Generate Schedules" to see your schedules here.</h3>
            </div>

        </section>
    </div>



    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const sliderSection = document.getElementById('slider-section');
            const checkboxSection = document.getElementById('checkbox-section');
            const scheduleMethodRadios = document.querySelectorAll('input[name="scheduleMethod"]');
            const allDaysCheckbox = document.getElementById('all-days');
            const dayCheckboxes = document.querySelectorAll('input[name="selectedDays"]:not(#all-days)');
            const rangeInput = document.querySelector('input[type="range"]');
            const numberDisplay = document.querySelector('.number');

            // Function to toggle between slider and checkbox sections
            scheduleMethodRadios.forEach(radio => {
                radio.addEventListener('change', function () {
                    if (this.value === 'maxDays') {
                        sliderSection.style.display = 'block';  // Show slider
                        checkboxSection.style.display = 'none'; // Hide checkboxes
                    } else {
                        sliderSection.style.display = 'none';  // Hide slider
                        checkboxSection.style.display = 'block'; // Show checkboxes
                    }
                });
            });

            // Update the display for the number of days when using the slider
            rangeInput.addEventListener('input', function () {
                numberDisplay.textContent = this.value;
            });

            // Function to handle the "All Week" checkbox behavior
            allDaysCheckbox.addEventListener('change', function () {
                if (this.checked) {
                    dayCheckboxes.forEach(checkbox => {
                        checkbox.checked = false;    // Uncheck other checkboxes
                        checkbox.disabled = true;    // Disable other checkboxes
                    });
                } else {
                    dayCheckboxes.forEach(checkbox => {
                        checkbox.disabled = false;   // Enable checkboxes when "All Week" is unchecked
                    });
                }
            });

            // Initialize the correct visibility based on the initially selected radio button
            if (document.querySelector('input[name="scheduleMethod"]:checked').value === 'maxDays') {
                sliderSection.style.display = 'block';
                checkboxSection.style.display = 'none';
            } else {
                sliderSection.style.display = 'none';
                checkboxSection.style.display = 'block';
            }
        });
    </script>
    <script>
        //cookie
        document.addEventListener('DOMContentLoaded', function () {
            fetch('/api/cart/getGenerateRequest')
                .then(response => response.json())
                .then(data => {
        @* console.log(data); *@
                        document.querySelector('input[name="minimumNumberOfItemsPerDay"]').value = data.minimumNumberOfItemsPerDay;
                    document.getElementById('minimumNumberOfItemsPerDayValue').textContent = data.minimumNumberOfItemsPerDay;

                    document.querySelector('input[name="largestAllowedGap"]').value = data.largestAllowedGap;
                    document.getElementById('largestAllowedGapValue').textContent = data.largestAllowedGap;
                    document.querySelector('input[name="maxNumberOfGeneratedSchedules"]').value = data.maxNumberOfGeneratedSchedules;
                    document.getElementById('maxNumberOfGeneratedSchedulesValue').textContent = data.maxNumberOfGeneratedSchedules;

                    document.querySelector('input[name="isEngineering"]').checked = data.isEngineering;
                    document.querySelector('input[name="numberOfDays"]').value = data.numberOfDays;
                    document.getElementById('numberOfDaysValue').textContent = data.numberOfDays;
                    document.querySelector('input[name="daysStart"][value="' + data.daysStart + '"]').checked = true;
                    document.querySelector('input[name="daysEnd"][value="' + data.daysEnd + '"]').checked = true;
                    document.querySelector('input[name="scheduleMethod"][value="' + (data.isNumberOfDaysSelected ? 'maxDays' : 'selectDays') + '"]').checked = true;
                    if (data.isNumberOfDaysSelected) {
                        document.getElementById('slider-section').style.display = 'block';
                        document.getElementById('checkbox-section').style.display = 'none';
                    } else {
                        document.getElementById('slider-section').style.display = 'none';
                        document.getElementById('checkbox-section').style.display = 'block';
                        document.querySelector('input[name="selectedDays"][value="all"]').checked = data.selectedDaysCheckbox.length === 0;
                        document.querySelectorAll('input[name="selectedDays"]:not([value="all"])').forEach(checkbox => {
                            checkbox.checked = data.selectedDaysCheckbox.includes(checkbox.value);
                        });
                    }
                })
                .catch(error => console.error('Error fetching generate request:', error));
        });
    </script>

    <script>

        let cart = [];
        //dont show any courses if empty
        document.addEventListener('DOMContentLoaded', () => {
            fetch('/api/coursebase/getAllCourses')
                .then(response => response.json())
                .then(courses => {
                    const searchInput = document.getElementById('course-search');
                    searchInput.addEventListener('input', () => {
                        const query = searchInput.value.toLowerCase();
                        if (!query || query.length <= 1) {
                            updateSearchResults([]); // Clear search results
                            return;
                        }
                        const filteredCourses = courses.filter(course =>
                            course.courseName.toLowerCase().includes(query) ||
                            course.courseCode.toLowerCase().includes(query)
                        );
                        updateSearchResults(filteredCourses);
                    });
                })
                .catch(error => console.error('Error fetching courses:', error));

            // Fetch the cart items from the backend
            fetch('/api/cart/getCartItems')
                .then(response => response.json())
                .then(cartItems => {
        @* console.log(cartItems); *@
                        cart = cartItems; // Store full course objects in the cart array
                    cart.forEach(course => updateCartUI(course));
                })
                .catch(error => console.error('Error fetching cart items:', error));

            const searchButton = document.getElementById('add-to-cart');
            const searchInput = document.getElementById('course-search');
            searchButton.addEventListener('click', () => {
                const query = searchInput.value.trim();
                if (!query) {
                    alert('Please enter a search query.');
                    return;
                }
                isLoading(true);
                fetch(`/api/coursebase/search/${encodeURIComponent(query)}`)
                    .then(response => response.json())
                    .then(data => {
                        isLoading(false);
                        updateSearchResults(data);
                    })
                    .catch(error => {
                        console.error('Error fetching search results:', error);
                        searchResultsContainer.innerHTML = '<p>Error fetching results</p>';
                    });


            });
        });


        function isLoading(state) {
            const searchInput = document.getElementById('course-search');
            const loading = document.getElementById('loading');
            if (state) {
                loading.style.display = 'block';
                searchInput.disabled = true;
            } else {
                loading.style.display = 'none';
                searchInput.disabled = false;
            }
        }
        function isGenerating(state) {
            const generateButton = document.getElementById('generate-schedule');
            const loading = document.getElementById('generate-loading');
            if (state) {
                loading.style.display = 'block';
                generateButton.disabled = true;
            } else {
                loading.style.display = 'none';
                generateButton.disabled = false;
            }
        }


        function updateSearchResults(courses) {
            const resultsContainer = document.getElementById('search-results');
            resultsContainer.innerHTML = ''; // Clear previous results

            courses.forEach(course => {
                const resultItem = document.createElement('div');
                resultItem.classList.add('search-result-item');

                resultItem.innerHTML = `
                <p><strong>${course.courseCode}: ${course.courseName}</strong></p>
            `;

                resultItem.addEventListener('click', () => {
                    addToCart(course);
                });

                resultsContainer.appendChild(resultItem);
            });
        }

        function addToCart(course) {
            if (!cart.some(c => c.courseCode === course.courseCode)) {
                if (cart.length >= 8) {
                    alert("You can register maximum of 8 courses per semester. متحلوّش");
                    return;
                }
                cart.push(course); // Add full course object to cart
                if (document.querySelector('input[name="isLiveData"]:checked')) {
                    isLoading(true);
                    fetch(`/api/coursebase/search/${encodeURIComponent(course.courseCode)}`)
                        .then(response => response.json())
                        .then(data => {
                            isLoading(false);
                            fetch('/api/cart/add', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(course)
                            });
                        })
                        .catch(error => {
                            console.error('Error fetching search results:', error);
                            searchResultsContainer.innerHTML = '<p>Error fetching results</p>';
                        });


                }
                // Call backend to store in C# List


                // Update the cart UI
                updateCartUI(course);
            }
        }

        function updateCartUI(course) {
            const cartItemsContainer = document.getElementById('cart-items');

            const cartItem = document.createElement('li');
            cartItem.classList.add('cart-item');
            cartItem.innerHTML = `<p><strong>${course.courseCode}: ${course.courseName}</strong></p>`;

            // Remove from cart on click
            cartItem.addEventListener('click', () => removeFromCart(course, cartItem));

            cartItemsContainer.appendChild(cartItem);
        }

        function removeFromCart(course, cartItem) {
            const index = cart.findIndex(c => c.courseCode === course.courseCode); // Match by courseCode
            if (index > -1) {
                cart.splice(index, 1); // Remove from cart array

                fetch('/api/cart/remove', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(course)
                });

                // Remove the cart item from UI
                cartItem.remove();
            }
        }

        document.getElementById('generate-schedule').addEventListener('click', function (event) {
            isGenerating(true);
            event.preventDefault(); // Prevent the default button behavior

            // Capture input values using their selectors
            const minimumNumberOfItemsPerDay = document.querySelector('input[name="minimumNumberOfItemsPerDay"]').value;
            const largestAllowedGap = document.querySelector('input[name="largestAllowedGap"]').value;
            const maxNumberOfGeneratedSchedules = document.querySelector('input[name="maxNumberOfGeneratedSchedules"]').value;
            const sliderElement = document.querySelector('input[name="numberOfDays"]'); // Explicitly select the slider input
            const isEngineering = document.querySelector('input[name="isEngineering"]').checked;
            // Define the days of the week in order (starting with Saturday)
            const daysOfWeek = ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'];

            // Determine whether "Pick max number of days" or "Select specific days" is selected
            const isNumberOfDaysSelected = document.querySelector('input[name="scheduleMethod"]:checked').value === 'maxDays';

            let selectedDaysArray = [false, false, false, false, false, false]; // Default to false for each day

            if (isNumberOfDaysSelected) {
                // Max number of days selected, use the slider value
                const numberOfDays = sliderElement ? sliderElement.value : 0; // Use the slider value or 0
                selectedDaysArray = Array(parseInt(numberOfDays)).fill(true).concat(Array(6 - numberOfDays).fill(false));
            } else {
                // Specific days selected, use the checkboxes
                const selectedDaysCheckboxes = Array.from(document.querySelectorAll('input[name="selectedDays"]:checked')).map(el => el.value);

                if (selectedDaysCheckboxes.includes('all')) {
                    // If "All Week" is selected, set all days to true
                    selectedDaysArray.fill(true);
                } else {
                    selectedDaysCheckboxes.forEach(day => {
                        const dayIndex = daysOfWeek.indexOf(day); // Find the index of the selected day
                        if (dayIndex !== -1) {
                            selectedDaysArray[dayIndex] = true;
                        }
                    });
                }
            }

            // Capture additional form data (start time, end time, etc.)
            const daysStart = document.querySelector('input[name="daysStart"]:checked')?.value || '';
            const daysEnd = document.querySelector('input[name="daysEnd"]:checked')?.value || '';

            // Construct the GenerateRequest object
            const generateRequest = {
                selectedDays: selectedDaysArray, // Boolean array for selected days
                daysStart,
                daysEnd,
                selectedItems: cart,
                isEngineering: isEngineering,
                customSelectedItems: [],
                minimumNumberOfItemsPerDay: parseInt(minimumNumberOfItemsPerDay),
                largestAllowedGap: parseInt(largestAllowedGap),
                numberOfDays: isNumberOfDaysSelected ? parseInt(sliderElement.value || 0) : 0,
                maxNumberOfGeneratedSchedules: parseInt(maxNumberOfGeneratedSchedules),
                isNumberOfDaysSelected: isNumberOfDaysSelected, // Determines whether we're using max number of days or specific days
                selectedDaysCheckbox: !isNumberOfDaysSelected ? selectedDaysArray : [] // If specific days are chosen
            };
            fetch('/api/cart/generate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(generateRequest)
            });

        @* console.log(generateRequest); *@

            // URL for the fetch call
            const url = '/api/generate';
            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(generateRequest)
            })
                .then(response => response.text()) // Expect HTML response
                .then(html => {
                    isGenerating(false);
                    // Inject the returned HTML into the page
                    document.getElementById('schedule-container').innerHTML = html;
                })
                .catch(error => {
                    isGenerating(flase);

                    console.error('There was a problem with the fetch operation:', error);
                });
        });




    </script>


    <script>
        document.querySelectorAll('.box').forEach(box => {
            const input_range = box.querySelector('.input-range');
            const number = box.querySelector('.number');
            const line = box.querySelector('.line');
            const max_value = input_range.max;

            input_range.addEventListener('input', () => {
                const value = input_range.value;
                number.innerHTML = value;
                line.style.width = (value / max_value) * 100 + '%';
            });
        });

    </script>
</body>

</html>

<style>
    .pp {
        padding: 30px;
    }

    .top-section-text {
        display: flex;
        margin-bottom: 20px;
        color: var(--light-text);
    }

    .search-section {
        background-color: var(--lighter-dark);
        height: 400px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        position: relative;
        width: 60%;
        margin-right: 20px;
        padding: 20px;
        color: var(--light-text);
    }

    .search-section h1,
    h2 {
        margin-top: 0;
    }

    .search-bar {
        margin-bottom: 15px;
    }

    .search-results {
        background-color: var(--lighter-dark);
        max-height: 280px;
        overflow-y: auto;
        padding: 10px;
        border-radius: 5px;
    }

    .search-result-item {
        background-color: var(--dark-text);
        color: white;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 5px;
        width: 100%;
        cursor: pointer;
        /* Full width */
        box-sizing: border-box;
        font-size: 1.1rem;
    }

    .search-result-item p {
        margin: 0;
        font-size: 1rem;
    }

    .search-result-item:hover {
        background-color: var(--dark-blue);
    }

    .search-results::-webkit-scrollbar {
        width: 8px;
    }

    .search-results::-webkit-scrollbar-thumb {
        background-color: var(--dark-text);
        /* Custom scrollbar color */
        border-radius: 10px;
    }

    /* Cart Section with the same style as search results */
    #cart {
        background-color: var(--lighter-dark);
        /* Match the background with search-section */
        max-height: 400px;
        /* Limit height similar to search results */
        overflow-y: auto;
        padding: 20px;

        border-radius: 10px;
        /* Same border radius */
    }

    /* Cart item with the same look and feel as search result items */
    .cart-item {
        background-color: var(--light-blue);
        /* Match the search result item color */
        color: white;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 5px;
        width: 100%;
        /* Full width like search result items */
        cursor: pointer;
        box-sizing: border-box;
        font-size: 1.1rem;
    }

    .cart-item p {
        margin: 0;
        font-size: 1rem;
    }

    /* Custom scrollbar for the cart section */
    #cart::-webkit-scrollbar {
        width: 8px;
    }

    #cart::-webkit-scrollbar-thumb {
        background-color: var(--dark-text);
        /* Match the scrollbar thumb with search result color */
        border-radius: 10px;

    }

    #cart-items {
        padding: 0;
        list-style-type: none;
    }

    /* Hover effect for cart items */
    .cart-item:hover {
        background-color: var(--dark-blue);
    }


    #all-schedules {
        background-color: var(--lighter-dark);
        /* Match the background with search-section */
        overflow-y: auto;
        padding: 20px;
        border-radius: 10px;
        /* Same border radius */
    }

    .right-section {
        display: flex;
        flex-direction: column;
        width: 100%;
        margin-right: 20px;
        margin-left: 10px;
        padding: 10px;
    @*gap:10px;*@
    }

    /* From Uiverse.io by SmookyDev */
    .tooltip {
        position: relative;
        display: inline-block;
        cursor: pointer;
        font-family: "Arial", sans-serif;
    }

    .tooltip:hover .tooltiptext {
        visibility: visible;
        opacity: 1;
    }

    .tooltiptext {
        visibility: hidden;
        width: 200px;
        background-color: var(--lighter);
        color: var(--light-text);
        text-align: center;
        border-radius: 5px;
        padding: 10px;
        position: absolute;
        z-index: 1;
        font-weight: 500;
    @*top:80%;*@@*left:200%;*@margin-left: 50px;
        opacity: 0;
        transition: opacity 0.3s;
    }

    .tooltip .icon {
        display: inline-block;
        width: 20px;
        height: 20px;
        background-color: var(--dark-text);
        color: var(--light-text);
        border-radius: 50%;
        text-align: center;
        line-height: 20px;
    }

    .top-section {
        margin-top: 5px;
        display: flex;
        gap: 20px;

    }

    .right-section-header {
        display: flex;
        flex-direction: column;
        padding: 10px;
        gap: 10px;
        width: 100%;
    }

    .clear-cart-btn {
        background-color: var(--lighter-dark);
        color: var(--light-text);
        border: 1px solid var(--light-text);
        border-radius: 5px;
        padding: 5px 10px;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .clear-cart-btn:hover {
        background-color: #ff4444;
        border-color: #ff4444;
    }

    .navbar {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0.5rem 2rem;
    }

    .nav-left {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .logo-img {
        height: 45px;
        width: auto;
    }

    .logo-text {
        display: flex;
        flex-direction: column;
    }

    .logo-text h1 {
        margin: 0;
        font-size: 1.5rem;
        color: var(--light-text);
        font-weight: 600;
    }

    .logo-text span {
        font-size: 0.7rem;
        color: var(--dark-text);
        font-style: italic;
    }

    .mode-toggle {
        display: flex;
        align-items: center;
    }

    .btn-container {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.25rem;
        background: var(--dark);
        border-radius: 20px;
    }

    .mode-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 24px;
        height: 24px;
    }
</style>

<script>

    const rootElement = document.documentElement;
    const colorModeCheckbox = document.getElementById('color_mode');

    // Check if user has a mode preference saved in localStorage
    const currentMode = localStorage.getItem('theme');
    if (currentMode === 'light') {
        rootElement.classList.add('light-mode');
        colorModeCheckbox.checked = true;  // Ensure the checkbox reflects the current mode
    }

    // Event listener for the checkbox to toggle dark/light mode
    colorModeCheckbox.addEventListener('change', () => {
        if (colorModeCheckbox.checked) {
            rootElement.classList.add('light-mode');
            localStorage.setItem('theme', 'light');
        } else {
            rootElement.classList.remove('light-mode');
            localStorage.setItem('theme', 'dark');
        }
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const clearCartButton = document.getElementById('clear-cart');
        clearCartButton.addEventListener('click', () => {
            if (confirm('Are you sure you want to clear your cart? This will remove all selected courses.')) {
                fetch('/api/cart/clear', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(() => {
                    // Clear the cart array
                    cart = [];
                    // Clear the UI
                    const cartItemsContainer = document.getElementById('cart-items');
                    cartItemsContainer.innerHTML = '';
                    // Refresh the page to reset all states
                    window.location.reload();
                });
            }
        });
    });
</script>