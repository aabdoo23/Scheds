@using Scheds.Domain.Entities
@model Scheds.Domain.ViewModels.GenerateAndResultViewModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scheds - Generate Schedules</title>
    <link rel="stylesheet" href="~/css/styles.css">
    <link rel="icon" type="image/png" href="~/images/abdo.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>

<body>
    @await Html.PartialAsync("_NavbarPartial")

    <!-- Generate Schedules Page -->
    <div class="Container">
        <div class="notification">
            <div class="notification__icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" viewBox="0 0 24 24" height="24" fill="none">
                    <path fill="#393a37"
                        d="m13 13h-2v-6h2zm0 4h-2v-2h2zm-1-15c-1.3132 0-2.61358.25866-3.82683.7612-1.21326.50255-2.31565 1.23915-3.24424 2.16773-1.87536 1.87537-2.92893 4.41891-2.92893 7.07107 0 2.6522 1.05357 5.1957 2.92893 7.0711.92859.9286 2.03098 1.6651 3.24424 2.1677 1.21325.5025 2.51363.7612 3.82683.7612 2.6522 0 5.1957-1.0536 7.0711-2.9289 1.8753-1.8754 2.9289-4.4189 2.9289-7.0711 0-1.3132-.2587-2.61358-.7612-3.82683-.5026-1.21326-1.2391-2.31565-2.1677-3.24424-.9286-.92858-2.031-1.66518-3.2443-2.16773-1.2132-.50254-2.5136-.7612-3.8268-.7612z">
                    </path>
                </svg>
            </div>
            <div class="notification__title">ðŸš¨ BUG Fix ðŸš¨ Fixed the bug with the search, the courses are now up to date
                and if you can't find a course search live for it.</div>
        </div>
        <div class="success_notification">
            <div class="notification__icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" viewBox="0 0 24 24" height="24" fill="none">
                    <path fill="#393a37"
                        d="m13 13h-2v-6h2zm0 4h-2v-2h2zm-1-15c-1.3132 0-2.61358.25866-3.82683.7612-1.21326.50255-2.31565 1.23915-3.24424 2.16773-1.87536 1.87537-2.92893 4.41891-2.92893 7.07107 0 2.6522 1.05357 5.1957 2.92893 7.0711.92859.9286 2.03098 1.6651 3.24424 2.1677 1.21325.5025 2.51363.7612 3.82683.7612 2.6522 0 5.1957-1.0536 7.0711-2.9289 1.8753-1.8754 2.9289-4.4189 2.9289-7.0711 0-1.3132-.2587-2.61358-.7612-3.82683-.5026-1.21326-1.2391-2.31565-2.1677-3.24424-.9286-.92858-2.031-1.66518-3.2443-2.16773-1.2132-.50254-2.5136-.7612-3.8268-.7612z">
                    </path>
                </svg>
            </div>
            <div class="notification__title">ðŸš¨NEW AnnouncementðŸš¨ Scheds is now live for the 2025-2026 season, up and
                running for 3 years now, love you guys :* </div>
        </div>
        <!-- Search and Cart Section -->
        <section class="search-cart">
            <div class="search-section">
                <div style="display: flex; flex-direction: row; vertical-align:middle; gap: 10px;">
                    <h2>Search for Courses</h2>
                    <label style="margin-top: 5px; font-weight: 600; color:var(--dark-text)"><input type="checkbox"
                            name="isLiveData" checked>
                        Use Live Data in course selection</label>
                    <div class="tooltip" style="margin-top: 5px;">
                        <i class="fas fa-info-circle"></i>
                        <div class="tooltiptext">Fetches data for each course on selection from Self Service to
                            <strong>ensure data is updated and all sections are there.</strong> Small delay.
                        </div>
                    </div>
                </div>
                <div class="search-bar" style="margin-right: 20px;">
                    <div class="group">
                        <svg class="icon" aria-hidden="true" viewBox="0 0 24 24">
                            <g>
                                <path
                                    d="M21.53 20.47l-3.66-3.66C19.195 15.24 20 13.214 20 11c0-4.97-4.03-9-9-9s-9 4.03-9 9 4.03 9 9 9c2.215 0 4.24-.804 5.808-2.13l3.66 3.66c.147.146.34.22.53.22s.385-.073.53-.22c.295-.293.295-.767.002-1.06zM3.5 11c0-4.135 3.365-7.5 7.5-7.5s7.5 3.365 7.5 7.5-3.365 7.5-7.5 7.5-7.5-3.365-7.5-7.5z">
                                </path>
                            </g>
                        </svg>
                        @* <input placeholder="Search" type="search" class="input"> *@
                        <input id="course-search" placeholder="Search" type="search" class="input">
                        <div id="loading" style="display: none; font-weight: 600;">
                            <div class="loader"></div>
                            Loading... Please wait.
                        </div>

                    </div>

                    <button id="add-to-cart" class="btn-primary">Search Live</button>
                    <div class="tooltip" style="margin-left: 10px;">
                        <i class="fas fa-info-circle"></i>
                        <div class="tooltiptext">If you can't find the course you're searching for in the autocomplete,
                            click this button.</div>
                    </div>
                </div>
                <div id="search-results" class="search-results">

                </div>
            </div>
            <div id="cart">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                    <h2 style="color:var(--light-text); margin: 0;">Your Courses</h2>
                    <button id="clear-cart" class="clear-cart-btn">
                        Clear Cart
                    </button>
                </div>
                <ul id="cart-items"></ul>
            </div>
        </section>



        <section class="customization">
            <div class="customization-header">
                <h2>Customize Your Schedule</h2>
                <p class="subtitle">Fine-tune your preferences to generate the perfect schedule</p>
            </div>

            <div class="customization-grid">
                <!-- Schedule Parameters Card -->
                <div class="customization-card">
                    <div class="card-header">
                        <i class="fas fa-sliders-h"></i>
                        <h3>Schedule Parameters</h3>
                    </div>
                    <div class="card-content">
                        <div class="slider-control">
                            <label class="control-label">Minimum Slots per Day</label>
                            <div class="slider-wrapper">
                                <input id="minimumNumberOfItemsPerDay" type="range" name="minimumNumberOfItemsPerDay"
                                    class="modern-slider" min="0" max="5" value="0" />
                                <span class="slider-value" id="minimumNumberOfItemsPerDayValue">0</span>
                            </div>
                            <div class="control-hint">0 = No minimum (recommended for flexibility)</div>
                        </div>

                        <div class="slider-control">
                            <label class="control-label">Maximum Gap Period (hours)</label>
                            <div class="slider-wrapper">
                                <input type="range" name="largestAllowedGap" class="modern-slider" min="0" max="8"
                                    value="0" />
                                <span class="slider-value" id="largestAllowedGapValue">0</span>
                            </div>
                            <div class="control-hint">0 = No minimum (recommended for flexibility)</div>
                        </div>

                        <div class="slider-control">
                            <label class="control-label">Maximum Number of Schedules</label>
                            <div class="slider-wrapper">
                                <input type="range" name="maxNumberOfGeneratedSchedules" class="modern-slider" min="5"
                                    max="50" value="15" />
                                <span class="slider-value" id="maxNumberOfGeneratedSchedulesValue">15</span>
                            </div>
                            <div class="control-hint">15 schedules provide good variety without overwhelming</div>
                        </div>
                    </div>
                </div>

                <!-- Student Options Card -->
                <div class="customization-card">
                    <div class="card-header">
                        <i class="fas fa-user-graduate"></i>
                        <h3>Student Options</h3>
                    </div>
                    <div class="card-content">
                        <div class="checkbox-control">
                            <label class="modern-checkbox">
                                <input type="checkbox" name="isEngineering">
                                <span class="checkmark"></span>
                                <div class="checkbox-content">
                                    <span class="checkbox-title">Engineering Student</span>
                                    <span class="checkbox-desc">Consider lab and tutorial sections together</span>
                                </div>
                            </label>
                            <div class="tooltip">
                                <i class="fas fa-info-circle"></i>
                                <div class="tooltiptext">This considers different sections of labs and tutorials
                                    together. For example: if a course needs a lab and a tutorial to be considered
                                    together, then when considering lecture 1, it will consider lab 1A and tutorial 1B
                                    together, etc.</div>
                            </div>
                        </div>

                        <div class="checkbox-control">
                            <label class="modern-checkbox">
                                <input type="checkbox" name="isConsiderZeroSeats" checked>
                                <span class="checkmark"></span>
                                <div class="checkbox-content">
                                    <span class="checkbox-title">Only Available Seats</span>
                                    <span class="checkbox-desc">Exclude sections with zero available seats</span>
                                </div>
                            </label>
                            <div class="tooltip">
                                <i class="fas fa-info-circle"></i>
                                <div class="tooltiptext">This will only consider course items where there are available
                                    seats. If you don't check this, it will consider all courses regardless of the
                                    number of seats left.</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Days Configuration Card -->
                <div class="customization-card">
                    <div class="card-header">
                        <i class="fas fa-calendar-week"></i>
                        <h3>Days Configuration</h3>
                    </div>
                    <div class="card-content">
                        <div class="radio-group">
                            <h4>Day Selection Method</h4>
                            <div class="radio-options">
                                <label class="modern-radio">
                                    <input type="radio" name="scheduleMethod" value="maxDays" checked>
                                    <span class="radio-mark"></span>
                                    <span>Maximum Days</span>
                                </label>
                                <label class="modern-radio">
                                    <input type="radio" name="scheduleMethod" value="selectDays">
                                    <span class="radio-mark"></span>
                                    <span>Specific Days</span>
                                </label>
                            </div>
                        </div>

                        <div id="slider-section" class="method-content">
                            <div class="slider-control">
                                <label class="control-label">Maximum Days on Campus</label>
                                <div class="slider-wrapper">
                                    <input type="range" id="numberOfDaysRange" name="numberOfDays" class="modern-slider"
                                        min="1" max="6" value="5" />
                                    <span class="slider-value" id="numberOfDaysValue">5</span>
                                </div>
                                <div class="control-hint">5 days allows weekday-only schedules (recommended)</div>
                            </div>
                        </div>

                        <div id="checkbox-section" class="method-content" style="display: none;">
                            <h4>Select Days on Campus</h4>
                            <div class="days-grid">
                                <label class="day-checkbox">
                                    <input type="checkbox" name="selectedDays" value="all" id="all-days">
                                    <span class="day-mark"></span>
                                    <span>All Week</span>
                                </label>
                                <label class="day-checkbox">
                                    <input type="checkbox" name="selectedDays" value="Saturday">
                                    <span class="day-mark"></span>
                                    <span>Saturday</span>
                                </label>
                                <label class="day-checkbox">
                                    <input type="checkbox" name="selectedDays" value="Sunday">
                                    <span class="day-mark"></span>
                                    <span>Sunday</span>
                                </label>
                                <label class="day-checkbox">
                                    <input type="checkbox" name="selectedDays" value="Monday">
                                    <span class="day-mark"></span>
                                    <span>Monday</span>
                                </label>
                                <label class="day-checkbox">
                                    <input type="checkbox" name="selectedDays" value="Tuesday">
                                    <span class="day-mark"></span>
                                    <span>Tuesday</span>
                                </label>
                                <label class="day-checkbox">
                                    <input type="checkbox" name="selectedDays" value="Wednesday">
                                    <span class="day-mark"></span>
                                    <span>Wednesday</span>
                                </label>
                                <label class="day-checkbox">
                                    <input type="checkbox" name="selectedDays" value="Thursday">
                                    <span class="day-mark"></span>
                                    <span>Thursday</span>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Time Preferences Card -->
                <div class="customization-card">
                    <div class="card-header">
                        <i class="fas fa-clock"></i>
                        <h3>Time Preferences</h3>
                    </div>
                    <div class="card-content">
                        <div class="time-section">
                            <h4>First Slot Start Time</h4>
                            <div class="time-options">
                                <label class="time-radio">
                                    <input type="radio" name="daysStart" value="08:30">
                                    <span class="time-mark"></span>
                                    <span>8:30 AM</span>
                                </label>
                                <label class="time-radio">
                                    <input type="radio" name="daysStart" value="10:30" checked>
                                    <span class="time-mark"></span>
                                    <span>10:30 AM</span>
                                </label>
                                <label class="time-radio">
                                    <input type="radio" name="daysStart" value="12:30">
                                    <span class="time-mark"></span>
                                    <span>12:30 PM</span>
                                </label>
                                <label class="time-radio">
                                    <input type="radio" name="daysStart" value="14:30">
                                    <span class="time-mark"></span>
                                    <span>2:30 PM</span>
                                </label>
                                <label class="time-radio">
                                    <input type="radio" name="daysStart" value="16:30">
                                    <span class="time-mark"></span>
                                    <span>4:30 PM</span>
                                </label>
                            </div>
                            <div class="time-hint">10:30 AM avoids early morning classes</div>
                        </div>

                        <div class="time-section">
                            <h4>Last Slot End Time</h4>
                            <div class="time-options">
                                <label class="time-radio">
                                    <input type="radio" name="daysEnd" value="12:30">
                                    <span class="time-mark"></span>
                                    <span>12:30 PM</span>
                                </label>
                                <label class="time-radio">
                                    <input type="radio" name="daysEnd" value="14:30">
                                    <span class="time-mark"></span>
                                    <span>2:30 PM</span>
                                </label>
                                <label class="time-radio">
                                    <input type="radio" name="daysEnd" value="16:30">
                                    <span class="time-mark"></span>
                                    <span>4:30 PM</span>
                                </label>
                                <label class="time-radio">
                                    <input type="radio" name="daysEnd" value="18:30" checked>
                                    <span class="time-mark"></span>
                                    <span>6:30 PM</span>
                                </label>
                                <label class="time-radio">
                                    <input type="radio" name="daysEnd" value="20:30">
                                    <span class="time-mark"></span>
                                    <span>8:30 PM</span>
                                </label>
                            </div>
                            <div class="time-hint">6:30 PM allows reasonable work/life balance</div>
                        </div>
                    </div>
                </div>
            </div>
            <button id="generate-schedule" class="btn-primary"
                style="width: 100%; background-color:var(--light-blue); font-size: 20px; padding: 15px;">
                Generate Schedules
            </button>
            <h3 id="generate-loading" style="text-align-last: center; color:var(--light-text); display: none;">Working
                the magic, please wait...<br>
                Don't panic it's not stuck, it's just amazed by your choices.</h3>
        </section>



        <!-- Generated Schedules Section -->
        <section class="generated-schedules">
            <div style="display: flex; flex-direction: row;">
                <h2>Generated Schedules</h2>
                <div class="tooltip" style="margin-bottom: 0px;">
                    <i class="fas fa-info-circle"></i>
                    <div class="tooltiptext">If you can't see a course selected above, then it probably has no schedule.
                        If not sure, search for the course using the Search live button and try again. If all fails,
                        report it in the form in the main page, bottom right.</div>
                </div>
            </div>
            <div id=schedule-container class="schedule-container">
                <h3>Click "Generate Schedules" to see your schedules here.</h3>
            </div>

        </section>
    </div>



    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const sliderSection = document.getElementById('slider-section');
            const checkboxSection = document.getElementById('checkbox-section');
            const scheduleMethodRadios = document.querySelectorAll('input[name="scheduleMethod"]');
            const allDaysCheckbox = document.getElementById('all-days');
            const dayCheckboxes = document.querySelectorAll('input[name="selectedDays"]:not(#all-days)');

            scheduleMethodRadios.forEach(radio => {
                radio.addEventListener('change', function () {
                    if (this.value === 'maxDays') {
                        sliderSection.style.display = 'block';
                        checkboxSection.style.display = 'none';
                    } else {
                        sliderSection.style.display = 'none';
                        checkboxSection.style.display = 'block';
                    }
                });
            });

            allDaysCheckbox.addEventListener('change', function () {
                if (this.checked) {
                    dayCheckboxes.forEach(checkbox => {
                        checkbox.checked = false;
                        checkbox.disabled = true;
                    });
                } else {
                    dayCheckboxes.forEach(checkbox => {
                        checkbox.disabled = false;
                    });
                }
            });
            if (document.querySelector('input[name="scheduleMethod"]:checked').value === 'maxDays') {
                sliderSection.style.display = 'block';
                checkboxSection.style.display = 'none';
            } else {
                sliderSection.style.display = 'none';
                checkboxSection.style.display = 'block';
            }
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            fetch('/api/cart/getGenerateRequest')
                .then(response => response.json())
                .then(data => {
                    @* console.log(data); *@
                        document.querySelector('input[name="minimumNumberOfItemsPerDay"]').value = data.minimumNumberOfItemsPerDay;
                    document.getElementById('minimumNumberOfItemsPerDayValue').textContent = data.minimumNumberOfItemsPerDay;

                    document.querySelector('input[name="largestAllowedGap"]').value = data.largestAllowedGap;
                    document.getElementById('largestAllowedGapValue').textContent = data.largestAllowedGap;
                    document.querySelector('input[name="maxNumberOfGeneratedSchedules"]').value = data.maxNumberOfGeneratedSchedules;
                    document.getElementById('maxNumberOfGeneratedSchedulesValue').textContent = data.maxNumberOfGeneratedSchedules;

                    document.querySelector('input[name="isEngineering"]').checked = data.isEngineering;
                    document.querySelector('input[name="numberOfDays"]').value = data.numberOfDays;
                    document.getElementById('numberOfDaysValue').textContent = data.numberOfDays;
                    document.querySelector('input[name="daysStart"][value="' + data.daysStart + '"]').checked = true;
                    document.querySelector('input[name="daysEnd"][value="' + data.daysEnd + '"]').checked = true;
                    document.querySelector('input[name="scheduleMethod"][value="' + (data.isNumberOfDaysSelected ? 'maxDays' : 'selectDays') + '"]').checked = true;
                    if (data.isNumberOfDaysSelected) {
                        document.getElementById('slider-section').style.display = 'block';
                        document.getElementById('checkbox-section').style.display = 'none';
                    } else {
                        document.getElementById('slider-section').style.display = 'none';
                        document.getElementById('checkbox-section').style.display = 'block';
                        document.querySelector('input[name="selectedDays"][value="all"]').checked = data.selectedDaysCheckbox.length === 0;
                        document.querySelectorAll('input[name="selectedDays"]:not([value="all"])').forEach(checkbox => {
                            checkbox.checked = data.selectedDaysCheckbox.includes(checkbox.value);
                        });
                    }
                })
                .catch(error => console.error('Error fetching generate request:', error));
        });
    </script>

    <script>

        let cart = [];
        let searchTimeout = null;

        document.addEventListener('DOMContentLoaded', () => {
            const searchInput = document.getElementById('course-search');

            searchInput.addEventListener('input', () => {
                const query = searchInput.value.trim();

                if (searchTimeout) {
                    clearTimeout(searchTimeout);
                }

                if (!query || query.length <= 1) {
                    updateSearchResults([]);
                    return;
                }

                searchTimeout = setTimeout(() => {
                    fetch(`/api/coursebase/get-filtered-courses?query=${encodeURIComponent(query)}`)
                        .then(response => response.json())
                        .then(courses => {
                            updateSearchResults(courses);
                        })
                        .catch(error => {
                            console.error('Error fetching filtered courses:', error);
                            updateSearchResults([]);
                        });
                }, 500); // 500ms debounce
            });

            fetch('/api/cart/getCartItems')
                .then(response => response.json())
                .then(cartItems => {
                    cart = cartItems;
                    cart.forEach(course => updateCartUI(course));
                })
                .catch(error => console.error('Error fetching cart items:', error));

            const searchButton = document.getElementById('add-to-cart');
            searchButton.addEventListener('click', () => {
                const query = searchInput.value.trim();
                if (!query) {
                    alert('Please enter a search query.');
                    return;
                }
                isLoading(true);
                fetch(`/api/coursebase/search/${encodeURIComponent(query)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Search request failed');
                        }
                        return response;
                    })
                    .then(() => {
                        isLoading(false);
                        window.location.reload();
                    })
                    .catch(error => {
                        console.error('Error fetching search results:', error);
                        isLoading(false);
                    });
            });
        });


        function isLoading(state) {
            const searchInput = document.getElementById('course-search');
            const loading = document.getElementById('loading');
            if (state) {
                loading.style.display = 'block';
                searchInput.disabled = true;
            } else {
                loading.style.display = 'none';
                searchInput.disabled = false;
            }
        }
        function isGenerating(state) {
            const generateButton = document.getElementById('generate-schedule');
            const loading = document.getElementById('generate-loading');
            if (state) {
                loading.style.display = 'block';
                generateButton.disabled = true;
            } else {
                loading.style.display = 'none';
                generateButton.disabled = false;
            }
        }


        function updateSearchResults(courses) {
            const resultsContainer = document.getElementById('search-results');
            resultsContainer.innerHTML = '';

            courses.forEach(course => {
                const resultItem = document.createElement('div');
                resultItem.classList.add('search-result-item');

                resultItem.innerHTML = `
                <p><strong>${course.courseCode}: ${course.courseName}</strong></p>
            `;

                resultItem.addEventListener('click', () => {
                    addToCart(course);
                });

                resultsContainer.appendChild(resultItem);
            });
        }

        function addToCart(course) {
            if (!cart.some(c => c.courseCode === course.courseCode)) {
                if (cart.length >= 8) {
                    alert("You can register maximum of 8 courses per semester. Ù…ØªØ­Ù„ÙˆÙ‘Ø´");
                    return;
                }
                cart.push(course);

                if (document.querySelector('input[name="isLiveData"]:checked')) {
                    isLoading(true);
                    fetch(`/api/coursebase/search/${encodeURIComponent(course.courseCode)}`)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Search request failed');
                            }
                            return response;
                        })
                        .then(() => {
                            isLoading(false);
                            return fetch('/api/cart/add', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(course)
                            });
                        })
                        .catch(error => {
                            console.error('Error fetching search results:', error);
                            isLoading(false);
                        });
                } else {
                    fetch('/api/cart/add', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(course)
                    });
                }

                updateCartUI(course);
            }
        }

        function updateCartUI(course) {
            const cartItemsContainer = document.getElementById('cart-items');

            const cartItem = document.createElement('li');
            cartItem.classList.add('cart-item');
            cartItem.innerHTML = `<p><strong>${course.courseCode}: ${course.courseName}</strong></p>`;

            cartItem.addEventListener('click', () => removeFromCart(course, cartItem));

            cartItemsContainer.appendChild(cartItem);
        }

        function removeFromCart(course, cartItem) {
            const index = cart.findIndex(c => c.courseCode === course.courseCode);
            if (index > -1) {
                cart.splice(index, 1);

                fetch('/api/cart/remove', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(course)
                });

                cartItem.remove();
            }
        }

        document.getElementById('generate-schedule').addEventListener('click', function (event) {
            isGenerating(true);
            event.preventDefault();

            const minimumNumberOfItemsPerDay = document.querySelector('input[name="minimumNumberOfItemsPerDay"]').value;
            const largestAllowedGap = document.querySelector('input[name="largestAllowedGap"]').value;
            const maxNumberOfGeneratedSchedules = document.querySelector('input[name="maxNumberOfGeneratedSchedules"]').value;
            const sliderElement = document.querySelector('input[name="numberOfDays"]');
            const isEngineering = document.querySelector('input[name="isEngineering"]').checked;
            const isConsiderZeroSeats = document.querySelector('input[name="isConsiderZeroSeats"]').checked;
            const daysOfWeek = ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday'];

            const isNumberOfDaysSelected = document.querySelector('input[name="scheduleMethod"]:checked').value === 'maxDays';

            let selectedDaysArray = [false, false, false, false, false, false];

            if (isNumberOfDaysSelected) {
                const numberOfDays = sliderElement ? sliderElement.value : 0;
                selectedDaysArray = Array(parseInt(numberOfDays)).fill(true).concat(Array(6 - numberOfDays).fill(false));
            } else {
                const selectedDaysCheckboxes = Array.from(document.querySelectorAll('input[name="selectedDays"]:checked')).map(el => el.value);

                if (selectedDaysCheckboxes.includes('all')) {
                    selectedDaysArray.fill(true);
                } else {
                    selectedDaysCheckboxes.forEach(day => {
                        const dayIndex = daysOfWeek.indexOf(day);
                        if (dayIndex !== -1) {
                            selectedDaysArray[dayIndex] = true;
                        }
                    });
                }
            }

            const daysStart = document.querySelector('input[name="daysStart"]:checked')?.value || '';
            const daysEnd = document.querySelector('input[name="daysEnd"]:checked')?.value || '';

            const generateRequest = {
                selectedDays: selectedDaysArray,
                daysStart,
                daysEnd,
                selectedItems: cart,
                isEngineering: isEngineering,
                customSelectedItems: [],
                minimumNumberOfItemsPerDay: parseInt(minimumNumberOfItemsPerDay),
                largestAllowedGap: parseInt(largestAllowedGap),
                considerZeroSeats: isConsiderZeroSeats,
                numberOfDays: isNumberOfDaysSelected ? parseInt(sliderElement.value || 0) : 0,
                maxNumberOfGeneratedSchedules: parseInt(maxNumberOfGeneratedSchedules),
                isNumberOfDaysSelected: isNumberOfDaysSelected,
                selectedDaysCheckbox: !isNumberOfDaysSelected ? selectedDaysArray : []
            };
            fetch('/api/cart/generate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(generateRequest)
            });

            const url = '/api/generate';
            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(generateRequest)
            })
                .then(response => response.text())
                .then(html => {
                    isGenerating(false);
                    document.getElementById('schedule-container').innerHTML = html;
                })
                .catch(error => {
                    isGenerating(false);
                    console.error('There was a problem with the fetch operation:', error);
                });
        });


    </script>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.modern-slider').forEach(slider => {
                const valueDisplay = slider.parentElement.querySelector('.slider-value');

                slider.addEventListener('input', () => {
                    if (valueDisplay) {
                        valueDisplay.textContent = slider.value;
                    }
                });

                if (valueDisplay) {
                    valueDisplay.textContent = slider.value;
                }
            });
        });
    </script>
</body>

</html>

<style>
    .pp {
        padding: 30px;
    }

    .search-section {
        background-color: var(--lighter-dark);
        height: 400px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        position: relative;
        width: 60%;
        margin-right: 20px;
        padding: 20px;
        color: var(--light-text);
    }

    .search-section h1,
    h2 {
        margin-top: 0;
    }

    .search-bar {
        margin-bottom: 15px;
    }

    .search-results {
        background-color: var(--lighter-dark);
        max-height: 280px;
        overflow-y: auto;
        padding: 10px;
        border-radius: 5px;
    }

    .search-result-item {
        background-color: var(--dark-text);
        color: white;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 5px;
        width: 100%;
        cursor: pointer;
        box-sizing: border-box;
        font-size: 1.1rem;
    }

    .search-result-item p {
        margin: 0;
        font-size: 1rem;
    }

    .search-result-item:hover {
        background-color: var(--dark-blue);
    }

    .search-results::-webkit-scrollbar {
        width: 8px;
    }

    .search-results::-webkit-scrollbar-thumb {
        background-color: var(--dark-text);
        /* Custom scrollbar color */
        border-radius: 10px;
    }

    /* Cart Section with the same style as search results */
    #cart {
        background-color: var(--lighter-dark);
        /* Match the background with search-section */
        max-height: 400px;
        /* Limit height similar to search results */
        overflow-y: auto;
        padding: 20px;

        border-radius: 10px;
        /* Same border radius */
    }

    /* Cart item with the same look and feel as search result items */
    .cart-item {
        background-color: var(--light-blue);
        /* Match the search result item color */
        color: white;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 5px;
        width: 100%;
        /* Full width like search result items */
        cursor: pointer;
        box-sizing: border-box;
        font-size: 1.1rem;
    }

    .cart-item p {
        margin: 0;
        font-size: 1rem;
    }

    /* Custom scrollbar for the cart section */
    #cart::-webkit-scrollbar {
        width: 8px;
    }

    #cart::-webkit-scrollbar-thumb {
        background-color: var(--dark-text);
        /* Match the scrollbar thumb with search result color */
        border-radius: 10px;

    }

    #cart-items {
        padding: 0;
        list-style-type: none;
    }

    /* Hover effect for cart items */
    .cart-item:hover {
        background-color: var(--dark-blue);
    }


    #all-schedules {
        background-color: var(--lighter-dark);
        /* Match the background with search-section */
        overflow-y: auto;
        padding: 20px;
        border-radius: 10px;
        /* Same border radius */
    }

    /* New Customization Section Styles */
    .customization {
        margin: 30px 0;
    }

    .customization-header {
        text-align: center;
        margin-bottom: 30px;
    }

    .customization-header h2 {
        color: var(--light-text);
        font-size: 1.7rem;
        margin: 0 0 10px 0;
        font-weight: 600;
    }

    .customization-header .subtitle {
        color: var(--dark-text);
        font-size: 1.1rem;
        margin: 0;
        opacity: 0.9;
    }

    .customization-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 25px;
        margin-bottom: 30px;
    }

    .customization-card {
        background: var(--lighter-dark);
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .customization-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .card-header {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 2px solid rgba(255, 255, 255, 0.1);
    }

    .card-header i {
        color: var(--light-blue);
        font-size: 1.3rem;
    }

    .card-header h3 {
        color: var(--light-text);
        margin: 0;
        font-size: 1.2rem;
        font-weight: 600;
    }

    .card-content {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    /* Modern Slider Styles */
    .slider-control {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .control-label {
        color: var(--light-text);
        font-weight: 500;
        font-size: 0.95rem;
    }

    .slider-wrapper {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .modern-slider {
        flex: 1;
        height: 6px;
        border-radius: 3px;
        background: var(--dark);
        outline: none;
        -webkit-appearance: none;
        appearance: none;
    }

    .modern-slider::-webkit-slider-thumb {
        appearance: none;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background: var(--light-blue);
        cursor: pointer;
        border: 3px solid white;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
        transition: all 0.2s ease;
    }

    .modern-slider::-webkit-slider-thumb:hover {
        transform: scale(1.1);
        background: var(--dark-blue);
    }

    .modern-slider::-moz-range-thumb {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background: var(--light-blue);
        cursor: pointer;
        border: 3px solid white;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
    }

    .slider-value {
        background: var(--light-blue);
        color: white;
        padding: 5px 10px;
        border-radius: 15px;
        font-weight: 600;
        font-size: 0.9rem;
        min-width: 30px;
        text-align: center;
    }

    /* Hint text styles */
    .control-hint,
    .time-hint {
        color: var(--dark-text);
        font-size: 0.75rem;
        opacity: 0.7;
        margin-top: 5px;
        font-style: italic;
    }

    /* Recommendation Card Styles */
    .recommendation-card {
        background: linear-gradient(135deg, var(--lighter-dark) 0%, rgba(52, 152, 219, 0.1) 100%);
        border: 2px solid var(--light-blue);
    }

    .recommendation-card .card-header {
        border-bottom-color: var(--light-blue);
    }

    .recommendation-card .card-header i {
        color: #f39c12;
    }

    .recommendation-item {
        padding: 12px;
        margin-bottom: 10px;
        background: rgba(255, 255, 255, 0.03);
        border-radius: 8px;
        border-left: 3px solid var(--light-blue);
    }

    .recommendation-item:last-child {
        margin-bottom: 0;
    }

    .rec-title {
        color: var(--light-text);
        font-weight: 600;
        font-size: 0.9rem;
        margin-bottom: 5px;
    }

    .rec-desc {
        color: var(--dark-text);
        font-size: 0.8rem;
        line-height: 1.4;
        opacity: 0.9;
    }

    /* Modern Checkbox Styles */
    .checkbox-control {
        display: flex;
        align-items: flex-start;
        gap: 10px;
    }

    .modern-checkbox {
        display: flex;
        align-items: flex-start;
        gap: 12px;
        cursor: pointer;
        flex: 1;
    }

    .modern-checkbox input[type="checkbox"] {
        display: none;
    }

    .checkmark {
        width: 20px;
        height: 20px;
        background: var(--dark);
        border: 2px solid var(--dark-text);
        border-radius: 4px;
        position: relative;
        transition: all 0.3s ease;
        flex-shrink: 0;
        margin-top: 2px;
    }

    .modern-checkbox input[type="checkbox"]:checked+.checkmark {
        background: var(--light-blue);
        border-color: var(--light-blue);
    }

    .modern-checkbox input[type="checkbox"]:checked+.checkmark::after {
        content: "âœ“";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        font-size: 14px;
        font-weight: bold;
    }

    .checkbox-content {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .checkbox-title {
        color: var(--light-text);
        font-weight: 500;
        font-size: 0.95rem;
    }

    .checkbox-desc {
        color: var(--dark-text);
        font-size: 0.85rem;
        opacity: 0.8;
    }

    /* Radio Button Styles */
    .radio-group {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .radio-group h4 {
        color: var(--light-text);
        margin: 0;
        font-size: 1rem;
        font-weight: 500;
    }

    .radio-options {
        display: flex;
        gap: 20px;
    }

    .modern-radio {
        display: flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
        color: var(--light-text);
        font-size: 0.95rem;
    }

    .modern-radio input[type="radio"] {
        display: none;
    }

    .radio-mark {
        width: 18px;
        height: 18px;
        border: 2px solid var(--dark-text);
        border-radius: 50%;
        position: relative;
        transition: all 0.3s ease;
    }

    .modern-radio input[type="radio"]:checked+.radio-mark {
        border-color: var(--light-blue);
    }

    .modern-radio input[type="radio"]:checked+.radio-mark::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 8px;
        height: 8px;
        background: var(--light-blue);
        border-radius: 50%;
    }

    /* Method Content */
    .method-content {
        margin-top: 15px;
        padding: 15px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 8px;
    }

    /* Days Grid */
    .days-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
        gap: 10px;
        margin-top: 10px;
    }

    .day-checkbox {
        display: flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
        color: var(--light-text);
        font-size: 0.9rem;
        padding: 8px;
        border-radius: 6px;
        transition: background 0.2s ease;
    }

    .day-checkbox:hover {
        background: rgba(255, 255, 255, 0.05);
    }

    .day-checkbox input[type="checkbox"] {
        display: none;
    }

    .day-mark {
        width: 16px;
        height: 16px;
        border: 2px solid var(--dark-text);
        border-radius: 3px;
        position: relative;
        transition: all 0.3s ease;
    }

    .day-checkbox input[type="checkbox"]:checked+.day-mark {
        background: var(--light-blue);
        border-color: var(--light-blue);
    }

    .day-checkbox input[type="checkbox"]:checked+.day-mark::after {
        content: "âœ“";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        font-size: 11px;
        font-weight: bold;
    }

    /* Time Section */
    .time-section {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .time-section h4 {
        color: var(--light-text);
        margin: 0;
        font-size: 1rem;
        font-weight: 500;
    }

    .time-options {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
        gap: 8px;
    }

    .time-radio {
        display: flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
        color: var(--light-text);
        font-size: 0.9rem;
        padding: 8px 12px;
        border-radius: 6px;
        border: 1px solid var(--dark-text);
        transition: all 0.2s ease;
        background: rgba(255, 255, 255, 0.02);
    }

    .time-radio:hover {
        background: rgba(255, 255, 255, 0.05);
        border-color: var(--light-blue);
    }

    .time-radio input[type="radio"] {
        display: none;
    }

    .time-mark {
        width: 14px;
        height: 14px;
        border: 2px solid var(--dark-text);
        border-radius: 50%;
        position: relative;
        transition: all 0.3s ease;
    }

    .time-radio input[type="radio"]:checked+.time-mark {
        border-color: var(--light-blue);
        background: var(--light-blue);
    }

    .time-radio input[type="radio"]:checked+.time-mark::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 4px;
        height: 4px;
        background: white;
        border-radius: 50%;
    }

    .time-radio input[type="radio"]:checked {
        +.time-mark+span {
            color: var(--light-blue);
            font-weight: 600;
        }
    }

    /* Improved Tooltip */
    .tooltip {
        position: relative;
        display: inline-block;
        cursor: pointer;
    }

    .tooltip i {
        color: var(--dark-text);
        font-size: 1rem;
        transition: color 0.2s ease;
    }

    .tooltip:hover i {
        color: var(--light-blue);
    }

    .tooltip:hover .tooltiptext {
        visibility: visible;
        opacity: 1;
    }

    .tooltiptext {
        visibility: hidden;
        width: 250px;
        background-color: var(--dark);
        color: var(--light-text);
        text-align: left;
        border-radius: 8px;
        padding: 12px;
        position: absolute;
        z-index: 1000;
        bottom: 125%;
        left: 50%;
        margin-left: -125px;
        opacity: 0;
        transition: opacity 0.3s;
        font-size: 0.85rem;
        line-height: 1.4;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .tooltiptext::after {
        content: "";
        position: absolute;
        top: 100%;
        left: 50%;
        margin-left: -5px;
        border-width: 5px;
        border-style: solid;
        border-color: var(--dark) transparent transparent transparent;
    }

    /* Responsive Design */
    @* @media (max-width: 768px) {
        .customization-grid {
            grid-template-columns: 1fr;
            gap: 20px;
        }
        
        .radio-options {
            flex-direction: column;
            gap: 10px;
        }
        
        .time-options {
            grid-template-columns: 1fr;
        }
        
        .days-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    } *@

    .right-section {
        display: flex;
        flex-direction: column;
        width: 100%;
        margin-right: 20px;
        margin-left: 10px;
        padding: 10px;
        @*gap:10px;*@
    }

    .top-section {
        margin-top: 5px;
        display: flex;
        gap: 20px;
    }

    .clear-cart-btn {
        background-color: var(--lighter-dark);
        color: var(--light-text);
        border: 1px solid var(--light-text);
        border-radius: 5px;
        padding: 5px 10px;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .clear-cart-btn:hover {
        background-color: #ff4444;
        border-color: #ff4444;
    }

    .navbar {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0.5rem 2rem;
    }

    .nav-left {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .logo-img {
        height: 45px;
        width: auto;
    }

    .logo-text {
        display: flex;
        flex-direction: column;
    }

    .logo-text h1 {
        margin: 0;
        font-size: 1.5rem;
        color: var(--light-text);
        font-weight: 600;
    }

    .logo-text span {
        font-size: 0.7rem;
        color: var(--dark-text);
        font-style: italic;
    }

    .mode-toggle {
        display: flex;
        align-items: center;
    }

    .btn-container {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.25rem;
        background: var(--dark);
        border-radius: 20px;
    }

    .mode-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 24px;
        height: 24px;
    }


    .notification {
        font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        padding: 12px;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: start;
        background: #1e3b8a;
        border-radius: 8px;
        box-shadow: 0px 0px 5px -3px #111;
        margin-top: 10px;
    }

    .success_notification {
        font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        padding: 12px;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: start;
        background: #14542e;
        border-radius: 8px;
        box-shadow: 0px 0px 5px -3px #111;
        margin-top: 10px;
        margin-bottom: 10px;
    }

    .notification__icon {
        width: 20px;
        height: 20px;
        transform: translateY(-2px);
        margin-right: 8px;
    }

    .notification__icon path {
        fill: #fff;
    }

    .notification__title {
        font-weight: 500;
        font-size: 1rem;
        color: #fff;
    }
</style>

<script>

    const rootElement = document.documentElement;
    const colorModeCheckbox = document.getElementById('color_mode');

    const currentMode = localStorage.getItem('theme');
    if (currentMode === 'light') {
        rootElement.classList.add('light-mode');
        colorModeCheckbox.checked = true;
    }

    // Event listener for the checkbox to toggle dark/light mode
    colorModeCheckbox.addEventListener('change', () => {
        if (colorModeCheckbox.checked) {
            rootElement.classList.add('light-mode');
            localStorage.setItem('theme', 'light');
        } else {
            rootElement.classList.remove('light-mode');
            localStorage.setItem('theme', 'dark');
        }
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const clearCartButton = document.getElementById('clear-cart');
        clearCartButton.addEventListener('click', () => {
            if (confirm('Are you sure you want to clear your cart? This will remove all selected courses.')) {
                fetch('/api/cart/clear', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(() => {
                    // Clear the cart array
                    cart = [];
                    // Clear the UI
                    const cartItemsContainer = document.getElementById('cart-items');
                    cartItemsContainer.innerHTML = '';
                    // Refresh the page to reset all states
                    window.location.reload();
                });
            }
        });
    });
</script>