@using Scheds.Models
@model List<List<ReturnedCardItem>>

<div class="all-container">
    <div style="font-weight:600; font-size:18px; text-align: center;">
        @if(Model.Count==0)
        {
            <div>No Schedules Available with the selected customizations, try changing the customizations and try again.</div>
        }
        else
        {
            <div>@Model.Count Generated Schedules<br>Scroll down to see more</div>
        }
        
    </div>
    <div class="scroll-container">
        @for (int i = 1; i <= Model.Count; i++)
        {
            <div class="schedule">
                <div class="current-schedule">Schedule @i</div> 
                @await Component.InvokeAsync("ScheduleViewComponent", Model[i - 1])
            </div>
        }
    </div>
</div>

<style>
    .all-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
        max-height: 800px;
    }

    .scroll-container {
        display: flex;
        flex-direction: column;
        width: 100%;
        height: 100%;
        /* Ensure it takes full height of the container */
    @*max-height:300px;*@overflow-y: auto;
        /* Vertical scroll bar */
        scroll-behavior: smooth;
    @* hidescrollbarscrollbar-width: none; *@

    }
    .scroll-container::-webkit-scrollbar {
        width: 8px;
    }

    .scroll-container::-webkit-scrollbar-thumb {
        background-color: var(--dark-text);
        /* Custom scrollbar color */
        border-radius: 10px;
    }

    .schedule {
        flex: 0 0 auto;
        /* Prevent shrinking, keep natural width */
        width: 100%;
        margin-bottom: 20px;
        /* Space between schedules */
    }

    .current-schedule {
        font-size: 14px;
        font-weight: 600;
        margin-bottom: 10px;
        /* Space between number and schedule */
    }
</style>
