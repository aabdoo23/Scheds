@using Scheds.Models
@model List<List<ReturnedCardItem>>

<table border="1">
    <thead>
        <tr>
            <th>Time</th>
            <th>Saturday</th>
            <th>Sunday</th>
            <th>Monday</th>
            <th>Tuesday</th>
            <th>Wednesday</th>
            <th>Thursday</th>
        </tr>
    </thead>
    <tbody>
        @{
            // Define the time slots and corresponding hours
            var timeSlots = new[] {
        "8:30 AM - 9:29 AM",
        "9:30 AM - 10:29 AM",
        "10:30 AM - 11:29 AM",
        "11:30 AM - 12:29 PM",
        "12:30 PM - 1:29 PM",
        "1:30 PM - 2:29 PM",
        "2:30 PM - 3:29 PM",
        "3:30 PM - 4:29 PM",
        "4:30 PM - 5:29 PM",
        "5:30 PM - 6:29 PM",
        "6:30 PM - 7:29 PM",
        "7:30 PM - 8:29 PM"
        };

            var hoursMapping = new[] { 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 };

            if (Model == null || Model.Count == 0)
            {
                <tr>
                    <td colspan="7">No data available</td>
                </tr>
            }
            else
            {
                // Loop through each time slot
                for (int i = 0; i < timeSlots.Length; i++)
                {
                    <tr>
                        <!-- Time slot column -->
                        <td class="timeslot">@timeSlots[i]</td>

                        <!-- Loop through the 6 days of the week (Saturday to Thursday) -->
                        @for (int j = 0; j < 6; j++)
                        {
                            @if (Model.Count > j && Model[j] != null)
                            {
                                var cardItem = Model[j]
                                .FirstOrDefault(item => item?.startTime != null &&
                                hoursMapping[i] == item.startTime.Hours);

                                if (cardItem != null)
                                {
                                    var duration = cardItem.endTime - cardItem.startTime;
                                    var rowspan = (duration.TotalMinutes+1)/60;
                                    <td rowspan="@rowspan">

                                        @if (duration.TotalMinutes == 59)
                                        {
                                            @await Component.InvokeAsync("OneHourCardItemViewComponent", cardItem)
                                        }
                                        else
                                        {
                                            @await Component.InvokeAsync("CardItemViewComponent", cardItem)
                                        }
                                    </td>

                                }
                            }

                        }
                    </tr>
                }
            }
        }
    </tbody>
</table>

<style>
    /* Table styles */
    table {
        padding-bottom: 0px;
        margin-left: 45px;
        margin-top: 20px;
        width: 180vh;
        height: 300px;
        border-collapse: separate;
        /* Allows for border-radius */
        border-spacing: 0;
        /* Removes gaps between cells */
        border-radius: 10px;
        /* Applies rounded corners */
        overflow: hidden;
        /* Hides overflow on corners */
        box-shadow: rgba(255, 255, 255, 0.2) 0px 2px 8px 0px;
    }

    thead tr th:first-child,
    tbody tr td:first-child {
        width: 10em;
        min-width: 10em;
        max-width: 10em;
        word-break: break-all;
    }

    td {
        padding: 12px;
        height: 35px;
        border: none;
    }

    th {
        padding: 12px;
        background-color: var(--light-blue);
        /* Header background color */
        color: white;
        /* Header text color */
        border: 1px solid var(--dark-blue);
        /* Header border color */
        font-weight: bold;
    }

    .timeslot {
        background-color: var(--lighter);
        /* Slot background color */
        color: var(--light-text);
        font-weight: 550;
        font-size: 1em;
        text-align: center;
        max-width: 70px;
        border: none;
        border-bottom: 1px solid var(--dark);

    }

    /* Optional: Highlight even rows (striped table effect) */
    tr:nth-child(even) {
        background-color: var(--dark);
    }

    /* Applies rounded corners to outer borders */
    table {
        border: 2px transparent var(--dark-blue);
        /* Outer border color */
        border-radius: 10px;
        /* Rounded borders for the table */
    }
</style>
