@using Scheds.Domain.DTOs
@model List<ReturnedCardItemDTO>

<table border="1">
    <thead>
        <tr>
            <th>Time</th>
            <th>Saturday</th>
            <th>Sunday</th>
            <th>Monday</th>
            <th>Tuesday</th>
            <th>Wednesday</th>
            <th>Thursday</th>
        </tr>
    </thead>
    <tbody>
        @{
            var daysOfWeek = new[] { "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday" };

            if (Model == null || Model.Count == 0)
            {
                <tr>
                    <td colspan="7">No data available</td>
                </tr>
            }
            else
            {
                // Add a row for items with no schedule
                <tr>
                    <td class="timeslot">No Schedule</td>
                    @{
                        var noScheduleItems = Model.Where(item => item.Day == "").ToList();
                        var itemIndex = 0;
                    }
                    @for (int dayIndex = 0; dayIndex < 6; dayIndex++)
                    {
                        <td>
                            @if (itemIndex < noScheduleItems.Count)
                            {
                                @await Component.InvokeAsync("OneHourCardItemViewComponent", noScheduleItems[itemIndex])
                                itemIndex++;
                            }
                        </td>
                    }
                </tr>

                // Rest of the existing time slots
                var timeSlots = new[] {
                    "8:30 AM - 9:29 AM",
                    "9:30 AM - 10:29 AM",
                    "10:30 AM - 11:29 AM",
                    "11:30 AM - 12:29 PM",
                    "12:30 PM - 1:29 PM",
                    "1:30 PM - 2:29 PM",
                    "2:30 PM - 3:29 PM",
                    "3:30 PM - 4:29 PM",
                    "4:30 PM - 5:29 PM",
                    "5:30 PM - 6:29 PM",
                    "6:30 PM - 7:29 PM",
                    "7:30 PM - 8:29 PM"
                };

                var hoursMapping = new[] { 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 };
                var skipSlots = new int[6]; // Track how many columns to skip per day

                // Existing time slot rows
                for (int i = 0; i < timeSlots.Length; i++)
                {
                    <tr>
                        <td class="timeslot">@timeSlots[i]</td>

                        @for (int dayIndex = 0; dayIndex < 6; dayIndex++)
                        {
                            if (skipSlots[dayIndex] > 0)
                            {
                                skipSlots[dayIndex]--;
                                continue;
                            }

                            var currentDay = daysOfWeek[dayIndex];
                            var cardItem = Model.FirstOrDefault(item => 
                                item?.StartTime != null &&
                                item.StartTime.Hours == hoursMapping[i] &&
                                item.Day.ToLower() == currentDay.ToLower());

                            if (cardItem != null)
                            {
                                var duration = cardItem.EndTime - cardItem.StartTime;
                                var rowspan = (duration.TotalMinutes + 1) / 60;
                                <td rowspan="@rowspan">
                                    @{
                                        if (duration.TotalMinutes == 59)
                                        {
                                            @await Component.InvokeAsync("OneHourCardItemViewComponent", cardItem)
                                        }
                                        else
                                        {
                                            @await Component.InvokeAsync("CardItemViewComponent", cardItem)
                                        }
                                    }
                                </td>
                                skipSlots[dayIndex] = (int)(rowspan - 1);
                            }
                            else
                            {
                                <td></td>
                            }
                        }
                    </tr>
                }
            }
        }
    </tbody>
</table>



<style>
    /* Table styles */
    table {
        align-self: center;
        padding-bottom: 0px;
        margin-left: 45px;
        margin-top: 20px;
        min-width: 180vh;
        height: 300px;
        border-collapse: separate;
        /* Allows for border-radius */
        border-spacing: 0;
        /* Removes gaps between cells */
        border-radius: 10px;
        /* Applies rounded corners */
        overflow: hidden;
        /* Hides overflow on corners */
        box-shadow: rgba(255, 255, 255, 0.2) 0px 2px 8px 0px;
    }

    thead tr th:first-child,
    tbody tr td:first-child {
        width: 9.5em;
        min-width: 9.5em;
    @*max-width:10em;*@word-break: break-all;
    }

    td {
        padding: 5px;
        height: 35px;
        border: none;
    }

    th {
        padding: 12px;
        background-color: var(--light-blue);
        /* Header background color */
        color: white;
        /* Header text color */
        border: 1px solid var(--dark-blue);
        /* Header border color */
        font-weight: bold;
    }

    .timeslot {
        background-color: var(--lighter);
        /* Slot background color */
        color: var(--light-text);
        font-weight: 550;
        font-size: 1em;
        text-align: center;
        max-width: 70px;
        border: none;
        border-bottom: 1px solid var(--dark);

    }

    /* Optional: Highlight even rows (striped table effect) */
    @*tr:nth-child(even){background-color:var(--dark);}*@

    /* Applies rounded corners to outer borders */
    table {
        border: 2px transparent var(--dark-blue);
        /* Outer border color */
        border-radius: 10px;
        /* Rounded borders for the table */
    }
</style>
