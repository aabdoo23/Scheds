@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scheds - Find Study Rooms</title>
    <link rel="icon" type="image/png" href="~/images/abdo.png">
    <link rel="stylesheet" href="~/css/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    <style>
        * {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            font-family: 'Arial', sans-serif;
        }

        .find-study-rooms-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            min-height: 100vh;
            color: var(--light-text);
        }

        .page-header {
            text-align: center;
            margin-top: 80px;
            margin-bottom: 30px;
        }

        .page-header h1 {
            font-size: 2.5rem;
            color: var(--light-text);
            margin-bottom: 10px;
        }

        .page-header p {
            font-size: 1.1rem;
            color: var(--light-text);
            opacity: 0.8;
        }

        .controls-container {
            display: flex;
            gap: 20px;
            width: 100%;
            max-width: 1400px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .search-section {
            background-color: var(--lighter-dark);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            padding: 25px;
            border-radius: 12px;
            flex: 1;
            min-width: 300px;
        }

        .search-section h2 {
            font-size: 1.5rem;
            margin-bottom: 20px;
            color: var(--light-text);
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            font-size: 1rem;
            font-weight: 600;
            color: var(--light-text);
            margin-bottom: 8px;
        }

        .form-group select,
        .form-group input {
            width: 100%;
            padding: 12px;
            font-size: 1rem;
            border: 2px solid var(--light-text);
            border-radius: 8px;
            background-color: var(--dark);
            color: var(--light-text);
            transition: border-color 0.3s;
        }

        .form-group select:focus,
        .form-group input:focus {
            border-color: #ff7300;
            outline: none;
        }

        .button-group {
            display: flex;
            gap: 10px;
            flex-direction: column;
        }

        .btn-primary {
            width: 100%;
            height: 50px;
            cursor: pointer;
            color: #fff;
            font-size: 16px;
            font-weight: 600;
            border-radius: 10px;
            border: none;
            background: var(--dark-blue);
            transition: 0.3s;
            position: relative;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 123, 255, 0.3);
        }

        .btn-primary:active {
            transform: scale(0.98);
        }

        .btn-secondary {
            background: var(--lightest-dark);
        }

        .filters-section {
            background-color: var(--lighter-dark);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            padding: 25px;
            border-radius: 12px;
            flex: 1;
            min-width: 300px;
        }

        .filter-options {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .filter-option {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .filter-option input[type="checkbox"] {
            width: 20px;
            height: 20px;
            cursor: pointer;
        }

        .stats-container {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .stat-card {
            background-color: var(--lighter-dark);
            padding: 15px 25px;
            border-radius: 10px;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
            flex: 1;
            min-width: 150px;
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: var(--dark-blue);
        }

        .stat-label {
            font-size: 0.9rem;
            color: var(--light-text);
            opacity: 0.8;
        }

        .results-section {
            width: 100%;
            max-width: 1400px;
        }

        .view-toggle {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            justify-content: center;
        }

        .toggle-btn {
            padding: 10px 20px;
            border: 2px solid var(--light-text);
            background-color: transparent;
            color: var(--light-text);
            border-radius: 8px;
            cursor: pointer;
            transition: 0.3s;
        }

        .toggle-btn.active {
            background-color: var(--dark-blue);
            border-color: var(--dark-blue);
            color: white;
        }

        .building-group {
            margin-bottom: 30px;
        }

        .building-header {
            background-color: var(--lighter-dark);
            padding: 15px 20px;
            border-radius: 10px 10px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            transition: 0.3s;
        }

        .building-header:hover {
            background-color: var(--lightest-dark);
        }

        .building-title {
            font-size: 1.3rem;
            font-weight: bold;
            color: var(--light-text);
        }

        .building-count {
            background-color: var(--dark-blue);
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.9rem;
            color: white;
        }

        .rooms-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
            padding: 20px;
            background-color: var(--dark);
            border-radius: 0 0 10px 10px;
        }

        .room-card {
            background-color: var(--lighter-dark);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .room-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
        }

        .room-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .room-number {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--light-text);
        }

        .room-status {
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 600;
        }

        .status-available {
            background-color: #28a745;
            color: white;
        }

        .status-busy {
            background-color: #dc3545;
            color: white;
        }

        .status-soon {
            background-color: #ffc107;
            color: #333;
        }

        .room-info {
            margin: 15px 0;
        }

        .info-row {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 8px;
            color: var(--light-text);
        }

        .info-row i {
            width: 20px;
            color: var(--dark-blue);
        }

        .timeline {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid var(--lightest-dark);
        }

        .timeline-label {
            font-size: 0.85rem;
            color: var(--light-text);
            opacity: 0.8;
            margin-bottom: 8px;
        }

        .timeline-bar {
            height: 30px;
            background-color: var(--dark);
            border-radius: 5px;
            position: relative;
            overflow: hidden;
        }

        .time-block {
            position: absolute;
            height: 100%;
            top: 0;
            transition: 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
            font-weight: 600;
        }

        .time-block.free {
            background-color: #28a745;
            color: white;
        }

        .time-block.busy {
            background-color: #dc3545;
            color: white;
        }

        .time-block:hover {
            opacity: 0.8;
            cursor: pointer;
        }

        .busy-periods {
            margin-top: 10px;
        }

        .busy-period {
            font-size: 0.85rem;
            color: var(--light-text);
            opacity: 0.7;
            margin: 5px 0;
        }

        .loading {
            text-align: center;
            padding: 40px;
            font-size: 1.2rem;
            color: var(--light-text);
        }

        .no-results {
            text-align: center;
            padding: 60px 20px;
            background-color: var(--lighter-dark);
            border-radius: 12px;
            color: var(--light-text);
        }

        .no-results i {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.5;
        }
    </style>
</head>

<body>
    @@await Html.PartialAsync("_NavbarPartial")

    <div class="find-study-rooms-container">
        <div class="page-header">
            <h1><i class="fas fa-door-open"></i> Find Study Rooms</h1>
            <p>Find the perfect study space for your needs</p>
        </div>

        <div class="controls-container">
            <div class="search-section">
                <h2><i class="fas fa-search"></i> Search Criteria</h2>
                <form id="search-form">
                    <div class="form-group">
                        <label for="day-select"><i class="fas fa-calendar-day"></i> Day of Week</label>
                        <select id="day-select">
                            <option value="saturday">Saturday</option>
                            <option value="sunday">Sunday</option>
                            <option value="monday">Monday</option>
                            <option value="tuesday">Tuesday</option>
                            <option value="wednesday">Wednesday</option>
                            <option value="thursday">Thursday</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="minimum-minutes"><i class="fas fa-clock"></i> Minimum Available Duration (minutes)</label>
                        <input type="number" id="minimum-minutes" value="60" min="0" step="30">
                    </div>

                    <div class="button-group">
                        <button type="button" id="search-now-button" class="btn-primary">
                            <i class="fas fa-bolt"></i> Search Now
                        </button>
                        <button type="button" id="search-button" class="btn-primary btn-secondary">
                            <i class="fas fa-search"></i> Search Selected Day
                        </button>
                    </div>
                </form>
            </div>

            <div class="filters-section">
                <h2><i class="fas fa-filter"></i> Display Options</h2>
                <div class="filter-options">
                    <div class="filter-option">
                        <input type="checkbox" id="show-timeline" checked>
                        <label for="show-timeline">Show Timeline View</label>
                    </div>
                    <div class="filter-option">
                        <input type="checkbox" id="show-busy-periods" checked>
                        <label for="show-busy-periods">Show Busy Periods</label>
                    </div>
                    <div class="filter-option">
                        <input type="checkbox" id="group-by-building" checked>
                        <label for="group-by-building">Group by Building</label>
                    </div>
                    <div class="filter-option">
                        <input type="checkbox" id="only-available-now">
                        <label for="only-available-now">Only Show Currently Available</label>
                    </div>
                </div>
                <div style="margin-top: 20px; padding: 15px; background-color: var(--dark); border-radius: 8px;">
                    <p style="font-size: 0.9rem; color: var(--light-text); margin: 0;">
                        <i class="fas fa-info-circle"></i> <strong>Tip:</strong> Use the minimum duration filter to find rooms available for longer study sessions.
                    </p>
                </div>
            </div>
        </div>

        <div id="stats-container" class="stats-container" style="display: none;"></div>

        <div class="results-section">
            <div id="results"></div>
        </div>
    </div>

    <script>
        let cachedResults = [];
        let currentDay = '';

        document.getElementById('search-button').addEventListener('click', () => {
            const day = document.getElementById('day-select').value;
            const minimumMinutes = parseInt(document.getElementById('minimum-minutes').value) || 0;
            fetchRoomAvailability(day, null, minimumMinutes);
        });

        document.getElementById('search-now-button').addEventListener('click', () => {
            const currentTime = new Date();
            const currentDay = currentTime.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
            const currentHour = currentTime.getHours();
            const currentMinute = currentTime.getMinutes();
            const formattedTime = `${currentHour.toString().padStart(2, '0')}:${currentMinute.toString().padStart(2, '0')}:00`;
            const minimumMinutes = parseInt(document.getElementById('minimum-minutes').value) || 0;

            // Set the day select to current day
            document.getElementById('day-select').value = currentDay;
            
            fetchRoomAvailability(currentDay, formattedTime, minimumMinutes);
        });

        // Re-render when display options change
        ['show-timeline', 'show-busy-periods', 'group-by-building', 'only-available-now'].forEach(id => {
            document.getElementById(id).addEventListener('change', () => {
                if (cachedResults.length > 0) {
                    displayResults(cachedResults, currentDay);
                }
            });
        });

        async function fetchRoomAvailability(day, time, minimumMinutes) {
            const resultsDiv = document.getElementById('results');
            const statsDiv = document.getElementById('stats-container');
            
            resultsDiv.innerHTML = '<div class="loading"><i class="fas fa-spinner fa-spin"></i> Searching for available rooms...</div>';
            statsDiv.style.display = 'none';

            const params = new URLSearchParams({
                dayOfWeek: day,
                minimumMinutes: minimumMinutes
            });

            if (time) {
                params.append('time', time);
            }

            try {
                const response = await fetch(`/api/room/availability?${params}`);
                const data = await response.json();

                cachedResults = data;
                currentDay = day;
                displayResults(data, day);
            } catch (error) {
                console.error('Error fetching room data:', error);
                resultsDiv.innerHTML = '<div class="no-results"><i class="fas fa-exclamation-triangle"></i><h3>Error fetching room data</h3><p>Please try again later.</p></div>';
            }
        }

        function displayResults(rooms, day) {
            const resultsDiv = document.getElementById('results');
            const statsDiv = document.getElementById('stats-container');
            
            const showTimeline = document.getElementById('show-timeline').checked;
            const showBusyPeriods = document.getElementById('show-busy-periods').checked;
            const groupByBuilding = document.getElementById('group-by-building').checked;
            const onlyAvailableNow = document.getElementById('only-available-now').checked;

            // Filter rooms if "only available now" is checked
            let filteredRooms = rooms;
            if (onlyAvailableNow) {
                const now = new Date();
                const currentTime = now.getHours() * 60 + now.getMinutes();
                filteredRooms = rooms.filter(room => {
                    return room.freePeriods.some(period => {
                        const startMinutes = timeToMinutes(period.startTime);
                        const endMinutes = timeToMinutes(period.endTime);
                        return currentTime >= startMinutes && currentTime <= endMinutes;
                    });
                });
            }

            if (filteredRooms.length === 0) {
                resultsDiv.innerHTML = '<div class="no-results"><i class="fas fa-door-closed"></i><h3>No Rooms Available</h3><p>No rooms match your search criteria. Try adjusting the filters.</p></div>';
                statsDiv.style.display = 'none';
                return;
            }

            // Show stats
            const totalRooms = filteredRooms.length;
            const availableNow = filteredRooms.filter(r => r.freePeriods.some(p => {
                const now = new Date();
                const currentTime = now.getHours() * 60 + now.getMinutes();
                const startMinutes = timeToMinutes(p.startTime);
                const endMinutes = timeToMinutes(p.endTime);
                return currentTime >= startMinutes && currentTime <= endMinutes;
            })).length;
            const avgAvailability = Math.round(filteredRooms.reduce((sum, r) => sum + r.continuousMinutesAvailable, 0) / filteredRooms.length);

            statsDiv.innerHTML = `
                <div class="stat-card">
                    <div class="stat-number">${totalRooms}</div>
                    <div class="stat-label">Total Rooms</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${availableNow}</div>
                    <div class="stat-label">Available Now</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">${avgAvailability}m</div>
                    <div class="stat-label">Avg. Free Time</div>
                </div>
            `;
            statsDiv.style.display = 'flex';

            if (groupByBuilding) {
                displayGroupedByBuilding(filteredRooms, showTimeline, showBusyPeriods);
            } else {
                displayFlat(filteredRooms, showTimeline, showBusyPeriods);
            }
        }

        function displayGroupedByBuilding(rooms, showTimeline, showBusyPeriods) {
            const resultsDiv = document.getElementById('results');
            
            // Group by building
            const buildingGroups = rooms.reduce((groups, room) => {
                const building = room.building || 'Unknown';
                if (!groups[building]) {
                    groups[building] = [];
                }
                groups[building].push(room);
                return groups;
            }, {});

            let html = '';
            for (const [building, buildingRooms] of Object.entries(buildingGroups)) {
                html += `
                    <div class="building-group">
                        <div class="building-header" onclick="toggleBuilding('${building}')">
                            <div class="building-title">
                                <i class="fas fa-building"></i> Building ${building}
                            </div>
                            <div class="building-count">${buildingRooms.length} rooms</div>
                        </div>
                        <div class="rooms-grid" id="building-${building}">
                            ${buildingRooms.map(room => createRoomCard(room, showTimeline, showBusyPeriods)).join('')}
                        </div>
                    </div>
                `;
            }

            resultsDiv.innerHTML = html;
        }

        function displayFlat(rooms, showTimeline, showBusyPeriods) {
            const resultsDiv = document.getElementById('results');
            resultsDiv.innerHTML = `
                <div class="rooms-grid">
                    ${rooms.map(room => createRoomCard(room, showTimeline, showBusyPeriods)).join('')}
                </div>
            `;
        }

        function createRoomCard(room, showTimeline, showBusyPeriods) {
            const status = getRoomStatus(room);
            const statusClass = status === 'Available Now' ? 'status-available' : status === 'Busy Now' ? 'status-busy' : 'status-soon';

            let timelineHtml = '';
            if (showTimeline) {
                timelineHtml = `
                    <div class="timeline">
                        <div class="timeline-label">Today's Schedule (8 AM - 10 PM)</div>
                        <div class="timeline-bar">
                            ${createTimelineBlocks(room)}
                        </div>
                    </div>
                `;
            }

            let busyPeriodsHtml = '';
            if (showBusyPeriods && room.busyPeriods.length > 0) {
                busyPeriodsHtml = `
                    <div class="busy-periods">
                        <div class="timeline-label">Occupied Times:</div>
                        ${room.busyPeriods.map(p => `
                            <div class="busy-period">
                                <i class="fas fa-clock"></i> ${formatTime(p.startTime)} - ${formatTime(p.endTime)}
                                <span style="opacity: 0.6">(${p.courseCode})</span>
                            </div>
                        `).join('')}
                    </div>
                `;
            }

            return `
                <div class="room-card">
                    <div class="room-header">
                        <div class="room-number"><i class="fas fa-door-open"></i> ${room.roomNumber}</div>
                        <div class="room-status ${statusClass}">${status}</div>
                    </div>
                    <div class="room-info">
                        <div class="info-row">
                            <i class="fas fa-building"></i>
                            <span>Building ${room.building}, Floor ${room.floor}</span>
                        </div>
                        <div class="info-row">
                            <i class="fas fa-hourglass-half"></i>
                            <span><strong>${room.continuousMinutesAvailable} minutes</strong> max continuous availability</span>
                        </div>
                        ${room.availableFrom ? `
                        <div class="info-row">
                            <i class="fas fa-check-circle"></i>
                            <span>Best time: ${formatTime(room.availableFrom)} - ${formatTime(room.availableUntil)}</span>
                        </div>
                        ` : ''}
                    </div>
                    ${timelineHtml}
                    ${busyPeriodsHtml}
                </div>
            `;
        }

        function createTimelineBlocks(room) {
            const dayStart = 8 * 60; // 8 AM in minutes
            const dayEnd = 22 * 60; // 10 PM in minutes
            const totalMinutes = dayEnd - dayStart;

            let blocks = '';

            // Add busy periods
            room.busyPeriods.forEach(period => {
                const startMinutes = timeToMinutes(period.startTime);
                const endMinutes = timeToMinutes(period.endTime);
                const left = ((startMinutes - dayStart) / totalMinutes) * 100;
                const width = ((endMinutes - startMinutes) / totalMinutes) * 100;

                blocks += `<div class="time-block busy" style="left: ${left}%; width: ${width}%" title="${period.courseCode} (${formatTime(period.startTime)} - ${formatTime(period.endTime)})"></div>`;
            });

            // Add free periods
            room.freePeriods.forEach(period => {
                const startMinutes = timeToMinutes(period.startTime);
                const endMinutes = timeToMinutes(period.endTime);
                const left = ((startMinutes - dayStart) / totalMinutes) * 100;
                const width = ((endMinutes - startMinutes) / totalMinutes) * 100;

                blocks += `<div class="time-block free" style="left: ${left}%; width: ${width}%" title="Free (${formatTime(period.startTime)} - ${formatTime(period.endTime)})"></div>`;
            });

            return blocks;
        }

        function getRoomStatus(room) {
            const now = new Date();
            const currentMinutes = now.getHours() * 60 + now.getMinutes();

            // Check if room is currently free
            const isFreeNow = room.freePeriods.some(period => {
                const start = timeToMinutes(period.startTime);
                const end = timeToMinutes(period.endTime);
                return currentMinutes >= start && currentMinutes <= end;
            });

            if (isFreeNow) {
                return 'Available Now';
            }

            // Check if room will be free soon (within 30 minutes)
            const freeSoon = room.freePeriods.some(period => {
                const start = timeToMinutes(period.startTime);
                return start > currentMinutes && start <= currentMinutes + 30;
            });

            if (freeSoon) {
                return 'Free Soon';
            }

            return 'Busy Now';
        }

        function timeToMinutes(timeString) {
            const [hours, minutes] = timeString.split(':').map(Number);
            return hours * 60 + minutes;
        }

        function formatTime(timeString) {
            const [hours, minutes] = timeString.split(':');
            const hour = parseInt(hours);
            const ampm = hour >= 12 ? 'PM' : 'AM';
            const displayHour = hour % 12 || 12;
            return `${displayHour}:${minutes} ${ampm}`;
        }

        function toggleBuilding(building) {
            const buildingDiv = document.getElementById(`building-${building}`);
            buildingDiv.style.display = buildingDiv.style.display === 'none' ? 'grid' : 'none';
        }

        // Theme toggle
        const rootElement = document.documentElement;
        const colorModeCheckbox = document.getElementById('color_mode');

        const currentMode = localStorage.getItem('theme');
        if (currentMode === 'light') {
            rootElement.classList.add('light-mode');
            if (colorModeCheckbox) colorModeCheckbox.checked = true;
        }

        if (colorModeCheckbox) {
            colorModeCheckbox.addEventListener('change', () => {
                if (colorModeCheckbox.checked) {
                    rootElement.classList.add('light-mode');
                    localStorage.setItem('theme', 'light');
                } else {
                    rootElement.classList.remove('light-mode');
                    localStorage.setItem('theme', 'dark');
                }
            });
        }
    </script>
</body>

</html>
