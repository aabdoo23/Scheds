@{
    ViewData["Title"] = "Seat Moderation";
    Layout = null;
    var isAuthenticated = User?.Identity?.IsAuthenticated ?? false;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scheds - Seat Moderation</title>
    <link rel="stylesheet" href="~/css/styles.css">
    <link rel="icon" type="image/png" href="~/images/abdo.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>

<body>
    @await Html.PartialAsync("_NavbarPartial")

    <!-- Seat Moderation Page -->
    <div class="Container">
        <div class="notification">
            <div class="notification__icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" viewBox="0 0 24 24" height="24" fill="none"><path fill="#393a37" d="m13 13h-2v-6h2zm0 4h-2v-2h2zm-1-15c-1.3132 0-2.61358.25866-3.82683.7612-1.21326.50255-2.31565 1.23915-3.24424 2.16773-1.87536 1.87537-2.92893 4.41891-2.92893 7.07107 0 2.6522 1.05357 5.1957 2.92893 7.0711.92859.9286 2.03098 1.6651 3.24424 2.1677 1.21325.5025 2.51363.7612 3.82683.7612 2.6522 0 5.1957-1.0536 7.0711-2.9289 1.8753-1.8754 2.9289-4.4189 2.9289-7.0711 0-1.3132-.2587-2.61358-.7612-3.82683-.5026-1.21326-1.2391-2.31565-2.1677-3.24424-.9286-.92858-2.031-1.66518-3.2443-2.16773-1.2132-.50254-2.5136-.7612-3.8268-.7612z"></path></svg>
            </div>
            <div class="notification__title">ðŸ“¢ Seat Moderation Tool - Monitor course seat availability in real-time</div>
        </div>

        <!-- Search and Cart Section -->
        <section class="search-cart">
            <div class="search-section">
                @if (!isAuthenticated)
                {
                    <div id="auth-lock-overlay" class="auth-lock-overlay">
                        <div class="lock-card">
                            <i class="fas fa-lock lock-icon"></i>
                            <div class="lock-text">
                                <strong>Authorized access required</strong>
                                <div style="font-size: 0.9rem; color: var(--dark-text); margin-top:6px;">Sign in with Google to access Seat Moderation features.</div>
                                <div style="margin-top:10px;">
                                    <a asp-controller="Account" asp-action="Login" class="auth-btn auth-login auth-highlight no-glogo">Sign in with Google</a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                <h2>Add Courses to Monitor</h2>
                <div class="search-bar" style="margin-right: 20px;">
                    <div class="group">
                        <svg class="icon" aria-hidden="true" viewBox="0 0 24 24">
                            <g>
                                <path d="M21.53 20.47l-3.66-3.66C19.195 15.24 20 13.214 20 11c0-4.97-4.03-9-9-9s-9 4.03-9 9 4.03 9 9 9c2.215 0 4.24-.804 5.808-2.13l3.66 3.66c.147.146.34.22.53.22s.385-.073.53-.22c.295-.293.295-.767.002-1.06zM3.5 11c0-4.135 3.365-7.5 7.5-7.5s7.5 3.365 7.5 7.5-3.365 7.5-7.5 7.5-7.5-3.365-7.5-7.5z"></path>
                            </g>
                        </svg>
                        <input id="course-search" placeholder="Search courses..." type="search" class="input">
                        <div id="loading" style="display: none; font-weight: 600;">
                            <div class="loader"></div>
                            Loading... Please wait.
                        </div>
                    </div>
                </div>
                <div id="search-results" class="search-results">
                </div>

                <!-- Section Selection -->
                <div id="section-selection" class="section-selection" style="display: none; margin-top: 15px;">
                    <h3 style="color: var(--light-text); margin: 0 0 10px 0; font-size: 1rem;">
                        <i class="fas fa-list" style="color: var(--light-blue); margin-right: 8px;"></i>
                        Select Section for <span id="selected-course-name"></span>
                    </h3>
                    <div class="section-dropdown-container">
                        <select id="section-dropdown" class="section-dropdown" disabled>
                            <option value="">Loading sections...</option>
                        </select>
                        <button id="add-course-btn" class="btn-primary" disabled style="margin-left: 10px;">
                            <i class="fas fa-plus"></i> Add to Cart
                        </button>
                    </div>
                </div>

                <!-- Controls and Info Section -->
                <div style="margin-top: 20px; display: flex; gap: 20px; flex-wrap: wrap;">
                    <!-- Monitoring Controls -->
                    <div class="monitoring-controls" style="padding: 20px; background: rgba(74, 144, 226, 0.1); border-radius: 10px; border: 1px solid rgba(74, 144, 226, 0.2); max-width: 500px; width: fit-content;">
                        <h3 style="color: var(--light-text); margin: 0 0 15px 0; display: flex; align-items: center; gap: 8px;">
                            <i class="fas fa-play-circle" style="color: var(--light-blue);"></i>
                            Monitoring Controls
                        </h3>
                        <div style="display: flex; gap: 15px; align-items: center; flex-wrap: wrap;">
                            <button type="button" id="startBtn" class="btn-primary" disabled style="background-color: #28a745;">
                                <i class="fas fa-play"></i> Start Monitoring
                            </button>
                            <button type="button" id="stopBtn" class="btn-primary" disabled style="background-color: #dc3545;">
                                <i class="fas fa-stop"></i> Stop Monitoring
                            </button>
                            <span id="statusText" style="color: var(--dark-text); font-style: italic; margin-left: 10px;"></span>
                        </div>
                    </div>

                    <!-- How to use box -->
                    <div class="control-hint" style="padding: 12px; background: rgba(74, 144, 226, 0.1); border-radius: 8px; border-left: 4px solid var(--light-blue); flex: 1; min-width: 300px;">
                        <div style="display: flex; align-items: flex-start; gap: 8px;">
                            <i class="fas fa-info-circle" style="color: var(--light-blue); margin-top: 2px;"></i>
                            <div>
                                <strong style="color: var(--light-text);">How to use:</strong><br>
                                <span style="color: var(--dark-text);">
                                    â€¢ Search for a course using the search bar<br>
                                    â€¢ Click on a course to see its available sections<br>
                                    â€¢ Select a section from the dropdown and add to cart<br>
                                    â€¢ Click "Start Monitoring" to begin tracking seat availability<br>
                                    â€¢ We automatically use your Google email for notifications<br>
                                    â€¢ You'll get notified both in this tab and via email when seats become available<br>
                                    â€¢ You can close this tab anytime - email notifications will continue working
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="cart">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                    <h2 style="color:var(--light-text); margin: 0;">Selected Courses</h2>
                    <button id="clear-cart" class="clear-cart-btn">
                        Clear All
                    </button>
                </div>
                <div id="selectedCoursesList" style="min-height: 100px;">
                    <p class="text-muted mb-0" id="noCourses" style="color: var(--dark-text); padding: 20px; text-align: center;">No courses selected yet.</p>
                </div>
            </div>
        </section>

        <!-- Results Section -->
        <section class="monitoring-results-section">
            <div class="results-header">
                <h2><i class="fas fa-chart-line"></i> Monitoring Results</h2>
                <div class="tooltip">
                    <i class="fas fa-info-circle"></i>
                    <div class="tooltiptext">Results update every minute while monitoring is active. Green indicates available seats, red indicates no seats available.</div>
                </div>
            </div>
            <div id="resultsContainer" class="results-container">
                <div class="empty-results">
                    <div class="empty-icon">
                        <i class="fas fa-play-circle"></i>
                    </div>
                    <h3>Ready to Monitor</h3>
                    <p>Click "Start Monitoring" to begin checking seat availability for your selected courses.</p>
                </div>
            </div>
        </section>
    </div>

    <script>

let cartCourses = []; // Will store cart items from API
let pollingInterval = null;
let isMonitoring = false;
let searchTimeout = null;
let selectedCourse = null; // Store the currently selected course

// Search-related elements
const searchInput = document.getElementById('course-search');
const sectionSelection = document.getElementById('section-selection');
const selectedCourseName = document.getElementById('selected-course-name');
const sectionDropdown = document.getElementById('section-dropdown');
const addCourseBtn = document.getElementById('add-course-btn');

// Email notification elements
const emailInput = document.getElementById('email-input');
let userEmail = localStorage.getItem('seatModerationEmail') || '';

// UI elements
const selectedCoursesList = document.getElementById('selectedCoursesList');
const noCourses = document.getElementById('noCourses');
const startBtn = document.getElementById('startBtn');
const stopBtn = document.getElementById('stopBtn');
const statusText = document.getElementById('statusText');
const resultsContainer = document.getElementById('resultsContainer');

// Search functionality
searchInput.addEventListener('input', () => {
    console.log('Search input event fired');
    const query = searchInput.value.trim();
    console.log('Query:', query);
    
    if (searchTimeout) {
        clearTimeout(searchTimeout);
    }
    
    if (!query || query.length <= 1) {
        console.log('Query too short, clearing results');
        updateSearchResults([]);
        return;
    }
    
    console.log('Setting timeout for search');
    searchTimeout = setTimeout(() => {
        console.log('Making API call to:', `/api/coursebase/get-filtered-courses?query=${encodeURIComponent(query)}`);
        fetch(`/api/coursebase/get-filtered-courses?query=${encodeURIComponent(query)}`)
            .then(response => {
                console.log('Response status:', response.status);
                return response.json();
            })
            .then(courses => {
                console.log('Received courses:', courses);
                updateSearchResults(courses);
            })
            .catch(error => {
                console.error('Error fetching filtered courses:', error);
                updateSearchResults([]);
            });
    }, 500);
});

// Handle section dropdown change
sectionDropdown.addEventListener('change', function() {
    if (this.value) {
        addCourseBtn.disabled = false;
    } else {
        addCourseBtn.disabled = true;
    }
});

// Handle add course button click - Add to cart instead of local array
addCourseBtn.addEventListener('click', async function() {
    if (!selectedCourse || !sectionDropdown.value) {
        return;
    }
    
    // Check if user is authenticated before making API call
    const isAuthenticated = @((User?.Identity?.IsAuthenticated ?? false).ToString().ToLower());
    if (!isAuthenticated) {
        alert('Please sign in with Google to add courses to your monitoring cart.');
        return;
    }
    
    const courseCode = selectedCourse.courseCode.toUpperCase();
    const sectionNum = sectionDropdown.value;
    const courseKey = `${courseCode}_${sectionNum}`;
    
    // Check if this exact course-section combination already exists
    if (cartCourses.some(c => `${c.courseCode}_${c.section}` === courseKey)) {
        alert(`${courseCode} Section ${sectionNum} is already added`);
        return;
    }
    
    // Add to seat moderation cart via API
    try {
        console.log('Making API call to add to cart:', { courseCode, sectionNum });
        const response = await fetch('/api/SeatModeration/cart/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                courseCode: courseCode,
                section: sectionNum
            })
        });
        
        console.log('API response status:', response.status);
        const result = await response.json();
        console.log('API response:', result);
        
        if (response.ok) {
            // Reload cart items from server
            await loadCartItems();
            
            // Hide section selection and reset
            sectionSelection.style.display = 'none';
            selectedCourse = null;
            sectionDropdown.innerHTML = '<option value="">Select a section...</option>';
            sectionDropdown.disabled = true;
            addCourseBtn.disabled = true;
        } else {
            if (response.status === 401) {
                alert('Your session has expired. Please sign in again to add courses to your monitoring cart.');
            } else {
                alert(result.Error || 'Error adding course to cart');
            }
        }
    } catch (error) {
        console.error('Error adding to cart:', error);
        alert('Error adding course to cart');
    }
});

// Initialize email input and load cart on page load
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOMContentLoaded fired');
    console.log('startBtn element:', startBtn);
    console.log('startBtn exists:', !!startBtn);
    
    if (userEmail) {
        emailInput.value = userEmail;
        updateEmailStatus(true);
    }
    
    // Load cart items from the cart API
    loadCartItems();
});

// Email functionality - auto-save on input
emailInput.addEventListener('input', function() {
    const email = this.value.trim();
    
    if (email === '') {
        // Clear email if input is empty
        userEmail = '';
        localStorage.removeItem('seatModerationEmail');
        updateEmailStatus(false);
        return;
    }
    
    // Basic email validation
    const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
    if (emailRegex.test(email)) {
        // Valid email - save it
        userEmail = email;
        localStorage.setItem('seatModerationEmail', email);
        updateEmailStatus(true);
    } else {
        // Invalid email - show as invalid but don't save
        updateEmailStatus(false);
    }
});

function updateEmailStatus(isValid) {
    if (isValid && userEmail) {
        emailInput.style.borderColor = '#28a745';
        emailInput.style.backgroundColor = 'rgba(40, 167, 69, 0.1)';
    } else {
        emailInput.style.borderColor = '';
        emailInput.style.backgroundColor = '';
    }
}

function updateSearchResults(courses) {
    const resultsContainer = document.getElementById('search-results');
    resultsContainer.innerHTML = '';

    courses.forEach(course => {
        const resultItem = document.createElement('div');
        resultItem.classList.add('search-result-item');

        resultItem.innerHTML = `<p><strong>${course.courseCode}: ${course.courseName}</strong></p>`;

        resultItem.addEventListener('click', () => {
            selectCourse(course);
        });

        resultsContainer.appendChild(resultItem);
    });
}

function selectCourse(course) {
    selectedCourse = course;
    selectedCourseName.textContent = `${course.courseCode}: ${course.courseName}`;
    
    // Show section selection UI
    sectionSelection.style.display = 'block';
    
    // Reset and disable dropdown while loading
    sectionDropdown.innerHTML = '<option value="">Loading sections...</option>';
    sectionDropdown.disabled = true;
    addCourseBtn.disabled = true;
    
    // Clear search results
    updateSearchResults([]);
    searchInput.value = `${course.courseCode}: ${course.courseName}`;
    
    // Fetch sections for this course using the new dedicated endpoint
    fetch(`/api/coursebase/get-course-sections`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            courseCode: course.courseCode
        })
    })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            populateSectionDropdown(data);
        })
        .catch(error => {
            console.error('Error fetching course sections:', error);
            sectionDropdown.innerHTML = '<option value="">Error loading sections</option>';
        });
}

function populateSectionDropdown(sections) {
    sectionDropdown.innerHTML = '';
    
    // Check if sections is a valid array
    if (!sections || !Array.isArray(sections) || sections.length === 0) {
        sectionDropdown.innerHTML = '<option value="">No sections available</option>';
        return;
    }
    
    // Add default option
    sectionDropdown.innerHTML = '<option value="">Select a section...</option>';
    
    // Add sections - backend returns List<string>, so each item is just a section number
    sections.forEach(sectionNumber => {
        const option = document.createElement('option');
        option.value = sectionNumber;
        option.textContent = `Section ${sectionNumber}`;
        sectionDropdown.appendChild(option);
    });
    
    // Enable dropdown
    sectionDropdown.disabled = false;
}

// Load cart items from the seat moderation cart API
async function loadCartItems() {
    try {
        console.log('Loading cart items...');
        const response = await fetch('/api/SeatModeration/cart');
        console.log('Cart get response status:', response.status);
        
        if (response.ok) {
            const result = await response.json();
            console.log('Cart get response:', result);
            if (result.success && result.cartItems) {
                // Transform cart items to match our expected format
                cartCourses = result.cartItems.map(item => ({
                    courseCode: item.courseCode,
                    section: item.section,
                    displayName: `${item.courseCode} - Section ${item.section}`,
                    cartId: item.id
                }));
                updateCoursesList();
            }
        } else if (response.status === 401) {
            console.log('User not authenticated, cart will be empty');
            cartCourses = [];
            updateCoursesList();
        } else {
            const errorResult = await response.json();
            console.error('Failed to load cart items:', errorResult);
            cartCourses = [];
            updateCoursesList();
        }
    } catch (error) {
        console.error('Error loading cart items:', error);
    }
}

function isLoading(state) {
    const loading = document.getElementById('loading');
    if (state) {
        loading.style.display = 'flex';
        searchInput.disabled = true;
    } else {
        loading.style.display = 'none';
        searchInput.disabled = false;
    }
}

function toggleCourseInput(disabled) {
    searchInput.disabled = disabled;
    sectionDropdown.disabled = disabled || !selectedCourse;
    addCourseBtn.disabled = disabled || !selectedCourse || !sectionDropdown.value;
    document.getElementById('clear-cart').disabled = disabled;
    
    // Visual feedback
    const searchSection = document.querySelector('.search-section');
    if (disabled) {
        searchSection.style.opacity = '0.6';
        searchSection.style.pointerEvents = 'none';
    } else {
        searchSection.style.opacity = '1';
        searchSection.style.pointerEvents = 'auto';
    }
}

// Update courses list display
function updateCoursesList() {
    console.log('updateCoursesList called with cartCourses:', cartCourses);
    
    if (cartCourses.length === 0) {
        console.log('No courses in cart, disabling start button');
        noCourses.style.display = 'block';
        selectedCoursesList.innerHTML = '<p class="text-muted mb-0" id="noCourses" style="color: var(--dark-text); padding: 20px; text-align: center;">No courses selected yet.</p>';
        startBtn.disabled = true;
    } else {
        console.log('Courses found in cart, enabling start button');
        selectedCoursesList.innerHTML = '';
        cartCourses.forEach((course, index) => {
            const cartItem = document.createElement('div');
            cartItem.classList.add('cart-item');
            
            // Create a more detailed display
            cartItem.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <strong>${course.courseCode}</strong><br>
                        <span style="font-size: 0.9em; opacity: 0.8;">Section ${course.section}</span>
                    </div>
                    <i class="fas fa-times" style="cursor: pointer; color: rgba(255,255,255,0.7); padding: 5px;" title="Remove course"></i>
                </div>
            `;
            cartItem.addEventListener('click', () => {
                if (!isMonitoring) { // Only allow removal when not monitoring
                    removeCourse(index);
                }
            });
            selectedCoursesList.appendChild(cartItem);
        });
        startBtn.disabled = false;
        // Always re-attach the event listener to the current button
        startBtn.removeEventListener('click', startMonitoringHandler);
        startBtn.addEventListener('click', startMonitoringHandler);
        const noCoursesElement = document.getElementById('noCourses');
        if (noCoursesElement) {
            noCoursesElement.style.display = 'none';
        }
    }
}

// Remove course
async function removeCourse(index) {
    const courseToRemove = cartCourses[index];
    
    // Check if user is authenticated before making API call
    const isAuthenticated = @((User?.Identity?.IsAuthenticated ?? false).ToString().ToLower());
    if (!isAuthenticated) {
        alert('Please sign in with Google to manage your monitoring cart.');
        return;
    }
    
    try {
        // Remove from seat moderation cart via API
        const response = await fetch('/api/SeatModeration/cart/remove', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                courseCode: courseToRemove.courseCode,
                section: courseToRemove.section
            })
        });
        
        if (response.ok) {
            // Reload cart items from server
            await loadCartItems();
        } else {
            const result = await response.json();
            if (response.status === 401) {
                alert('Your session has expired. Please sign in again to manage your monitoring cart.');
            } else {
                alert(result.Error || 'Error removing course from cart');
            }
        }
    } catch (error) {
        console.error('Error removing from cart:', error);
        alert('Error removing course from cart');
    }
}

// Clear all courses
document.getElementById('clear-cart').addEventListener('click', async function() {
    // Check if user is authenticated before making API call
    const isAuthenticated = @((User?.Identity?.IsAuthenticated ?? false).ToString().ToLower());
    if (!isAuthenticated) {
        alert('Please sign in with Google to manage your monitoring cart.');
        return;
    }
    
    if (confirm('Are you sure you want to clear all selected courses?')) {
        try {
            const response = await fetch('/api/SeatModeration/cart/clear', {
                method: 'POST'
            });
            
            if (response.ok) {
                // Reload cart items from server
                await loadCartItems();
            } else {
                const result = await response.json();
                if (response.status === 401) {
                    alert('Your session has expired. Please sign in again to manage your monitoring cart.');
                } else {
                    alert(result.Error || 'Error clearing cart');
                }
            }
        } catch (error) {
            console.error('Error clearing cart:', error);
            alert('Error clearing cart');
        }
    }
});

// --- Start Monitoring Handler ---
function startMonitoringHandler() {
    console.log('Start monitoring button clicked');
    
    // Check if user is authenticated before starting monitoring
    const isAuthenticated = @((User?.Identity?.IsAuthenticated ?? false).ToString().ToLower());
    if (!isAuthenticated) {
        alert('Please sign in with Google to start seat monitoring.');
        return;
    }
    
    console.log('Cart courses:', cartCourses);
    if (cartCourses.length === 0) {
        alert('Please add at least one course before starting monitoring');
        return;
    }
    
    isMonitoring = true;
    startBtn.disabled = true;
    stopBtn.disabled = false;
    stopBtn.style.pointerEvents = 'auto';
    stopBtn.style.opacity = '1';
    
    let statusMessage = 'Monitoring active...';
    if (userEmail) {
        statusMessage += ` (Email notifications enabled for ${userEmail})`;
    }
    statusText.textContent = statusMessage;
    
    // Disable course input during monitoring
    toggleCourseInput(true);
    
    console.log('Starting polling...');
    pollSeats();
    pollingInterval = setInterval(pollSeats, 60000);
}

// Remove any previous listeners and attach the handler once on DOMContentLoaded
startBtn.removeEventListener('click', startMonitoringHandler);
startBtn.addEventListener('click', startMonitoringHandler);

// Stop monitoring
stopBtn.addEventListener('click', function() {
    isMonitoring = false;
    startBtn.disabled = false;
    stopBtn.disabled = true;
    stopBtn.style.pointerEvents = 'none';
    stopBtn.style.opacity = '0.5';
    statusText.textContent = 'Monitoring stopped';
    
    // Re-enable course input
    toggleCourseInput(false);
    
    if (pollingInterval) {
        clearInterval(pollingInterval);
        pollingInterval = null;
    }
});

// Subscribe to monitoring function - automatically uses cart data
async function subscribeToMonitoring() {
    try {
        console.log('subscribeToMonitoring called');
        
        // Check if user is authenticated before making API call
        const isAuthenticated = @((User?.Identity?.IsAuthenticated ?? false).ToString().ToLower());
        if (!isAuthenticated) {
            alert('Please sign in with Google to subscribe to seat monitoring.');
            return;
        }
        
        // Get fresh cart data
        await loadCartItems();
        
        if (cartCourses.length === 0) {
            alert('No courses in cart to monitor');
            return;
        }
        
        const courseSections = cartCourses.map(course => `${course.courseCode}_${course.section}`);
        console.log('Subscribing to course sections:', courseSections);
        
        const response = await fetch('/api/SeatModeration/subscribe', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                CourseSections: courseSections
            })
        });
        
        console.log('Subscribe response status:', response.status);
        const result = await response.json();
        console.log('Subscribe response:', result);
        
        if (result.Success) {
            console.log('Successfully subscribed to monitoring for courses:', courseSections);
        } else {
            if (response.status === 401) {
                alert('Your session has expired. Please sign in again to subscribe to seat monitoring.');
            } else {
                console.error('Failed to subscribe to monitoring:', result.Error);
                alert('Failed to save monitoring subscription: ' + result.Error);
            }
        }
    } catch (error) {
        console.error('Error subscribing to monitoring:', error);
        alert('Error subscribing to monitoring. Please try again.');
    }
}

// Unsubscribe from monitoring function - automatically uses cart data
async function unsubscribeFromMonitoring() {
    try {
        // Check if user is authenticated before making API call
        const isAuthenticated = @((User?.Identity?.IsAuthenticated ?? false).ToString().ToLower());
        if (!isAuthenticated) {
            alert('Please sign in with Google to unsubscribe from seat monitoring.');
            return;
        }
        // Get current cart data
        const courseSections = cartCourses.map(course => `${course.courseCode}_${course.section}`);
        
        if (courseSections.length === 0) {
            console.log('No courses to unsubscribe from');
            return;
        }
        
        const response = await fetch('/api/SeatModeration/unsubscribe', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                CourseSections: courseSections
            })
        });
        
        const result = await response.json();
        
        if (result.Success) {
            console.log('Successfully unsubscribed from monitoring for courses:', courseSections);
        } else {
            if (response.status === 401) {
                alert('Your session has expired. Please sign in again to unsubscribe from seat monitoring.');
            } else {
                console.error('Failed to unsubscribe from monitoring:', result.Error);
            }
        }
    } catch (error) {
        console.error('Error unsubscribing from monitoring:', error);
    }
}

// Poll seats function
async function pollSeats() {
    if (!isMonitoring) return;
    
    try {
        statusText.textContent = 'Checking seats...';
        
        // Prepare arrays for the API call
        const courseCodes = cartCourses.map(course => course.courseCode);
        const sections = cartCourses.map(course => course.section);
        
        // Prepare request body
        const requestBody = {
            CourseCode: courseCodes,
            Sections: sections
        };
        
        // Add email if available
        if (userEmail) {
            requestBody.Email = userEmail;
        }
        
        const response = await fetch('/api/SeatModeration/check-seats', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody)
        });
        
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        // Handle both array response and object response
        let results = [];
        let success = true;
        if (Array.isArray(data)) {
            results = data;
        } else {
            success = data.success;
            results = data.results || [];
        }
        
        displayResults({ success, results });
        
        // Update status with email notification info
        let statusMessage = `Last checked: ${new Date().toLocaleTimeString()} - Found ${results.length} results`;
        if (userEmail) {
            statusMessage += ` (Email notifications enabled)`;
        }
        statusText.textContent = statusMessage;
        
    } catch (error) {
        console.error('Polling error:', error);
        statusText.textContent = 'Error checking seats - ' + error.message;
        resultsContainer.innerHTML = '<div style="padding: 20px; color: var(--light-text);"><h3>Error occurred while checking seats. Please try again.</h3><p>Error: ' + error.message + '</p></div>';
    }
}

function displayResults(data) {
    
    if (!data.success || !data.results) {
        resultsContainer.innerHTML = `
            <div class="no-results">
                <div class="no-results-icon">
                    <i class="fas fa-search"></i>
                </div>
                <h3>No Results Found</h3>
                <p>No course sections were found matching your criteria.</p>
                <div class="possible-reasons">
                    <h4>Possible reasons:</h4>
                    <ul>
                        <li>The course code doesn't exist</li>
                        <li>The specific section doesn't exist</li>
                        <li>The course is not available this semester</li>
                    </ul>
                </div>
            </div>
        `;
        return;
    }
    
    const requestedCount = cartCourses.length;
    const foundCount = data.results.length;
    
    const groupedResults = {};
    const foundCourseSections = new Set();
    
    data.results.forEach(result => {
        if (!groupedResults[result.course]) {
            groupedResults[result.course] = [];
        }
        groupedResults[result.course].push(result);
        foundCourseSections.add(`${result.course.toUpperCase()}_${result.section.toUpperCase()}`);
    });
    
    const missingCourseSections = [];
    cartCourses.forEach(course => {
        const key = `${course.courseCode.toUpperCase()}_${course.section.toUpperCase()}`;
        if (!foundCourseSections.has(key)) {
            missingCourseSections.push(course);
        }
    });
    
    
    let html = '<div class="results-content">';
    
    if (missingCourseSections.length > 0) {
        html += `
            <div class="error-courses">
                <div class="error-header">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>Some courses could not be found:</h3>
                </div>
                <div class="missing-courses-list">
        `;
        
        missingCourseSections.forEach(course => {
            html += `
                <div class="missing-course-item">
                    <i class="fas fa-times-circle"></i>
                    <span>${course.courseCode} Section ${course.section}</span>
                    <small>Course not found or section doesn't exist</small>
                </div>
            `;
        });
        
        html += `
                </div>
            </div>
        `;
    }
    
    // Only show results section if we have actual results
    if (Object.keys(groupedResults).length > 0) {
        html += '<div class="courses-grid">';
        
        // Display results grouped by course
        Object.keys(groupedResults).forEach(courseCode => {
            const courseSections = groupedResults[courseCode];
            const availableCount = courseSections.filter(s => s.hasSeats).length;
            const totalCount = courseSections.length;
            
            html += `
                <div class="course-card">
                    <div class="course-header">
                        <div class="course-title">
                            <i class="fas fa-graduation-cap"></i>
                            <div>
                                <h3>${courseCode}</h3>
                                ${courseSections[0].courseName ? `<p class="course-name">${courseSections[0].courseName}</p>` : ''}
                            </div>
                        </div>
                        <div class="availability-badge ${availableCount > 0 ? 'has-seats' : 'no-seats'}">
                            <span class="badge-count">${availableCount} out of ${totalCount}</span>
                            <span class="badge-label">available</span>
                        </div>
                    </div>
                    <div class="sections-list">
            `;
            
            // Display each section for this course
            courseSections.forEach(result => {
                const statusClass = result.hasSeats ? 'available' : 'full';
                const statusIcon = result.hasSeats ? 'fas fa-check-circle' : 'fas fa-times-circle';
                const statusText = result.hasSeats ? 'AVAILABLE' : 'FULL';
                
                html += `
                    <div class="section-item ${statusClass}">
                        <div class="section-info">
                            <div class="section-header">
                                <i class="${statusIcon}"></i>
                                <span class="section-number">Section ${result.section}</span>
                                <span class="section-status">${statusText}</span>
                            </div>
                            ${result.instructor ? `<div class="instructor-info">
                                <i class="fas fa-user"></i>
                                <span>${result.instructor}</span>
                            </div>` : ''}
                        </div>
                        <div class="seats-info">
                            <div class="seats-count ${statusClass}">
                                ${result.seatsLeft}
                            </div>
                            <div class="seats-label">seats</div>
                        </div>
                    </div>
                `;
            });
            
            html += `
                    </div>
                </div>
            `;
        });
        
        html += '</div>';
    }
    
    html += '</div>';
    resultsContainer.innerHTML = html;
}

</script>

<script>
    // Highlight the Sign in with Google button if the user is not authenticated
    (function() {
        const isAuthenticated = @((User?.Identity?.IsAuthenticated ?? false).ToString().ToLower());
        if (!isAuthenticated) {
            const loginBtn = document.querySelector('.auth-login');
            if (loginBtn) {
                loginBtn.style.boxShadow = '0 4px 12px rgba(66, 133, 244, 0.35)';
                loginBtn.style.border = '2px solid #4285F4';
                loginBtn.style.backgroundColor = '#4285F4';
                loginBtn.style.color = '#fff';
                loginBtn.style.padding = '8px 12px';
                loginBtn.style.borderRadius = '6px';
            }
        }
    })();
</script>

<style>
    .search-section {
        background-color: var(--lighter-dark);
        min-height: 400px;
        max-height: none;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        position: relative;
        width: 60%;
        margin-right: 20px;
        padding: 20px;
        color: var(--light-text);
        overflow: visible;
    }

    .search-section h1, h2 {
        margin-top: 0;
    }

    .search-bar {
        margin-bottom: 15px;
    }

    .search-results {
        background-color: var(--lighter-dark);
        max-height: 200px;
        overflow-y: auto;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 15px;
    }

    .search-result-item {
        background-color: var(--dark-text);
        color: white;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 5px;
        width: 100%;
        cursor: pointer;
        box-sizing: border-box;
        font-size: 1.1rem;
        transition: background-color 0.2s ease;
    }

    .search-result-item p {
        margin: 0;
        font-size: 1rem;
    }

    .search-result-item:hover {
        background-color: var(--dark-blue);
    }

    .search-results::-webkit-scrollbar {
        width: 8px;
    }

    .search-results::-webkit-scrollbar-thumb {
        background-color: var(--dark-text);
        border-radius: 10px;
    }

    /* Section Selection Styles */
    .section-selection {
        background-color: rgba(74, 144, 226, 0.1);
        border: 1px solid rgba(74, 144, 226, 0.3);
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 15px;
    }

    .section-selection h3 {
        display: flex;
        align-items: center;
        color: var(--light-text);
        margin: 0 0 15px 0;
        font-size: 1rem;
    }

    .section-dropdown-container {
        display: flex;
        align-items: center;
        gap: 10px;
        flex-wrap: wrap;
    }

    .section-dropdown {
        background-color: var(--dark);
        color: var(--light-text);
        border: 2px solid var(--dark-text);
        border-radius: 8px;
        padding: 8px 12px;
        font-size: 1rem;
        min-width: 200px;
        flex: 1;
        transition: border-color 0.3s ease;
        max-height: 200px;
        overflow-y: auto;
    }

    /* Auth lock overlay */
    .auth-lock-overlay {
        position: fixed; /* cover the whole viewport */
        inset: 0; /* top:0; right:0; bottom:0; left:0 */
        z-index: 3000;
        display: flex;
        justify-content: center;
        align-items: center;
        background: rgba(2,6,12,0.60); /* stronger backdrop */
        -webkit-backdrop-filter: blur(6px);
        backdrop-filter: blur(6px);
        padding: 24px;
        pointer-events: auto; /* catch clicks so underlying controls remain inert */
    }

    .lock-card {
        pointer-events: auto;
        width: 100%;
        max-width: 500px;
        display: flex;
        gap: 20px;
        align-items: center;
        padding: 24px 28px;
        border-radius: 16px;
        /* Fully opaque dark background for strong contrast */
        background: linear-gradient(180deg, #0a1118 0%, #071018 100%);
        box-shadow: 0 25px 60px rgba(2,6,23,0.8), 0 4px 12px rgba(0,0,0,0.5) inset;
        border: 2px solid rgba(255,255,255,0.08);
        color: #ffffff;
    }

    .lock-icon {
        font-size: 2.4rem;
        color: #ff4757; /* bright vibrant red for maximum visibility */
        background: rgba(255,71,87,0.15);
        padding: 10px;
        border-radius: 10px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        text-shadow: 0 0 8px rgba(255,71,87,0.4);
    }

    .lock-text {
        color: #ffffff;
        flex: 1;
    }

    .lock-text strong { 
        font-size: 1.25rem; 
        display: block; 
        font-weight: 700;
        color: #f8f9fa; /* bright white for maximum readability */
        margin-bottom: 8px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.5);
    }
    
    .lock-text div { 
        color: #f1f3f4; /* very bright light gray, almost white */
        margin-top: 8px; 
        font-size: 1.05rem; 
        line-height: 1.4;
        font-weight: 500;
        text-shadow: 0 1px 2px rgba(0,0,0,0.3);
    }

    .auth-highlight {
        background-color: #4285f4; /* bright Google blue */
        color: #ffffff;
        border: 0;
        padding: 12px 18px;
        border-radius: 12px;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 10px;
        font-weight: 700;
        font-size: 1rem;
        box-shadow: 0 16px 40px rgba(66,133,244,0.35), 0 0 20px rgba(66,133,244,0.2);
        transition: transform 160ms ease, box-shadow 160ms ease, background-color 120ms ease;
        cursor: pointer;
        animation: pulse 2.4s infinite;
        text-shadow: 0 1px 2px rgba(0,0,0,0.2);
    }

    .auth-highlight:hover {
        transform: translateY(-3px);
        background-color: #3367d6;
        box-shadow: 0 20px 50px rgba(66,133,244,0.4), 0 0 25px rgba(66,133,244,0.3);
    }

    @@keyframes pulse {
        0% { transform: translateY(0); box-shadow: 0 8px 20px rgba(43,111,216,0.18); }
        50% { transform: translateY(-4px); box-shadow: 0 14px 30px rgba(43,111,216,0.22); }
        100% { transform: translateY(0); box-shadow: 0 8px 20px rgba(43,111,216,0.18); }
    }

    .section-dropdown:focus {
        outline: none;
        border-color: var(--light-blue);
        background-color: var(--lighter-dark);
    }

    .section-dropdown:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        background-color: var(--dark-text);
    }

    .section-dropdown option {
        background-color: var(--dark);
        color: var(--light-text);
        padding: 8px;
        max-height: 40px;
    }

    /* Custom scrollbar for dropdown */
    .section-dropdown::-webkit-scrollbar {
        width: 8px;
    }

    .section-dropdown::-webkit-scrollbar-track {
        background: var(--dark);
        border-radius: 4px;
    }

    .section-dropdown::-webkit-scrollbar-thumb {
        background: var(--dark-text);
        border-radius: 4px;
    }

    .section-dropdown::-webkit-scrollbar-thumb:hover {
        background: var(--light-blue);
    }

    /* Email Notification Styles */
    .email-notification-section {
        background-color: rgba(40, 167, 69, 0.1);
        border: 1px solid rgba(40, 167, 69, 0.3);
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 15px;
    }

    .email-notification-section h3 {
        display: flex;
        align-items: center;
        color: var(--light-text);
        margin: 0 0 15px 0;
        font-size: 1rem;
    }

    .email-input-container {
        display: flex;
        align-items: center;
        gap: 10px;
        flex-wrap: wrap;
    }

    /* Loading animation */
    .loader {
        border: 2px solid #f3f3f3;
        border-top: 2px solid var(--light-blue);
        border-radius: 50%;
        width: 20px;
        height: 20px;
        animation: spin 1s linear infinite;
        display: inline-block;
        margin-right: 8px;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    #loading {
        color: var(--light-text);
        font-size: 0.9rem;
        padding: 10px;
        display: flex;
        align-items: center;
    }

    .search-bar {
        margin-bottom: 15px;
    }

    /* Cart Section */
    #cart {
        background-color: var(--lighter-dark);
        max-height: 400px;
        overflow-y: auto;
        padding: 20px;
        border-radius: 10px;
    }

    .cart-item {
        background-color: var(--light-blue);
        color: white;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 5px;
        width: 100%;
        cursor: pointer;
        box-sizing: border-box;
        font-size: 1.1rem;
        transition: background-color 0.2s ease;
    }

    .cart-item p {
        margin: 0;
        font-size: 1rem;
    }

    .cart-item:hover {
        background-color: var(--dark-blue);
    }

    #cart::-webkit-scrollbar {
        width: 8px;
    }

    #cart::-webkit-scrollbar-thumb {
        background-color: var(--dark-text);
        border-radius: 10px;
    }

    /* Search and Cart Layout */
    .search-cart {
        display: flex;
        gap: 20px;
        margin: 30px 0;
    }

    /* Customization Section Styles */
    .customization {
        margin: 30px 0;
    }

    .customization-header {
        text-align: center;
        margin-bottom: 30px;
    }

    .customization-header h2 {
        color: var(--light-text);
        font-size: 1.7rem;
        margin: 0 0 10px 0;
        font-weight: 600;
    }

    .customization-header .subtitle {
        color: var(--dark-text);
        font-size: 1.1rem;
        margin: 0;
        opacity: 0.9;
    }

    .customization-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 25px;
        margin-bottom: 30px;
    }

    .customization-card {
        background: var(--lighter-dark);
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .customization-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .card-header {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 2px solid rgba(255, 255, 255, 0.1);
    }

    .card-header i {
        color: var(--light-blue);
        font-size: 1.3rem;
    }

    .card-header h3 {
        color: var(--light-text);
        margin: 0;
        font-size: 1.2rem;
        font-weight: 600;
    }

    .card-content {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    /* Generated Schedules Section */
    .generated-schedules {
        margin: 30px 0;
    }

    .generated-schedules h2 {
        color: var(--light-text);
        font-size: 1.7rem;
        margin: 0 0 20px 0;
        font-weight: 600;
    }

    .schedule-container {
        background: var(--lighter-dark);
        border-radius: 10px;
        padding: 20px;
        min-height: 200px;
        color: var(--light-text);
    }

    .schedule-container h3 {
        color: var(--dark-text);
        text-align: center;
        margin: 50px 0;
    }

    /* Button Styles */
    .btn-primary {
        background-color: var(--light-blue);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        transition: background-color 0.2s ease;
    }

    .btn-primary:hover {
        background-color: var(--dark-blue);
    }

    .btn-primary:disabled {
        background-color: var(--dark-text);
        cursor: not-allowed;
        opacity: 0.6;
    }

    .clear-cart-btn {
        background-color: var(--lighter-dark);
        color: var(--light-text);
        border: 1px solid var(--light-text);
        border-radius: 5px;
        padding: 5px 10px;
        font-size: 0.9rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .clear-cart-btn:hover {
        background-color: #ff4444;
        border-color: #ff4444;
    }

    /* Input Styles */
    .group {
        display: flex;
        line-height: 28px;
        align-items: center;
        position: relative;
        width: 100%;
    }

    .input {
        width: 100%;
        height: 40px;
        line-height: 28px;
        padding: 0 1rem;
        padding-left: 2.5rem;
        border: 2px solid var(--dark-text);
        border-radius: 8px;
        outline: none;
        background-color: var(--dark);
        color: var(--light-text);
        transition: .3s ease;
        box-sizing: border-box;
    }

    .input::placeholder {
        color: var(--dark-text);
    }

    .input:focus, .input:hover {
        outline: none;
        border-color: var(--light-blue);
        background-color: var(--lighter-dark);
    }

    .input:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        background-color: var(--dark-text);
    }

    .icon {
        position: absolute;
        left: 1rem;
        fill: var(--dark-text);
        width: 1rem;
        height: 1rem;
        z-index: 1;
    }

    /* Notification Styles */
    .notification {
        font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        padding: 12px;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: start;
        background: #1e3b8a;
        border-radius: 8px;
        box-shadow: 0px 0px 5px -3px #111;
        margin-top: 10px;
        margin-bottom: 20px;
    }

    .notification__icon {
        width: 20px;
        height: 20px;
        transform: translateY(-2px);
        margin-right: 8px;
    }

    .notification__icon path {
        fill: #fff;
    }

    .notification__title {
        font-weight: 500;
        font-size: 1rem;
        color: #fff;
    }

    /* Recommendation Item Styles */
    .recommendation-item {
        padding: 12px;
        margin-bottom: 10px;
        background: rgba(255, 255, 255, 0.03);
        border-radius: 8px;
        border-left: 3px solid var(--light-blue);
    }

    .recommendation-item:last-child {
        margin-bottom: 0;
    }

    .rec-title {
        color: var(--light-text);
        font-weight: 600;
        font-size: 0.9rem;
        margin-bottom: 5px;
    }

    .rec-desc {
        color: var(--dark-text);
        font-size: 0.8rem;
        line-height: 1.4;
        opacity: 0.9;
    }

    /* Control Hint */
    .control-hint {
        color: var(--dark-text);
        font-size: 0.85rem;
        opacity: 0.8;
    }

    /* Tooltip */
    .tooltip {
        position: relative;
        display: inline-block;
        cursor: pointer;
    }

    .tooltip i {
        color: var(--dark-text);
        font-size: 1rem;
        transition: color 0.2s ease;
    }

    .tooltip:hover i {
        color: var(--light-blue);
    }

    .tooltip:hover .tooltiptext {
        visibility: visible;
        opacity: 1;
    }

    .tooltiptext {
        visibility: hidden;
        width: 250px;
        background-color: var(--dark);
        color: var(--light-text);
        text-align: left;
        border-radius: 8px;
        padding: 12px;
        position: absolute;
        z-index: 1000;
        bottom: 125%;
        left: 50%;
        margin-left: -125px;
        opacity: 0;
        transition: opacity 0.3s;
        font-size: 0.85rem;
        line-height: 1.4;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .tooltiptext::after {
        content: "";
        position: absolute;
        top: 100%;
        left: 50%;
        margin-left: -5px;
        border-width: 5px;
        border-style: solid;
        border-color: var(--dark) transparent transparent transparent;
    }

    /* Monitoring Results Section Styles */
    .monitoring-results-section {
        margin: 40px 0;
    }

    .results-header {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 25px;
    }

    .results-header h2 {
        color: var(--light-text);
        font-size: 1.8rem;
        margin: 0;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .results-header h2 i {
        color: var(--light-blue);
    }

    .results-container {
        background: linear-gradient(135deg, var(--lighter-dark), rgba(74, 144, 226, 0.05));
        border-radius: 15px;
        min-height: 300px;
        border: 1px solid rgba(74, 144, 226, 0.1);
        transition: all 0.3s ease;
    }

    /* Empty State */
    .empty-results {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 60px 20px;
        text-align: center;
        height: 300px;
    }

    .empty-icon {
        font-size: 4rem;
        color: var(--light-blue);
        margin-bottom: 20px;
        opacity: 0.7;
    }

    .empty-results h3 {
        color: var(--light-text);
        margin: 0 0 10px 0;
        font-size: 1.4rem;
    }

    .empty-results p {
        color: var(--dark-text);
        margin: 0;
        font-size: 1rem;
    }

    /* No Results State */
    .no-results {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 40px 20px;
        text-align: center;
    }

    .no-results-icon {
        font-size: 3rem;
        color: #dc3545;
        margin-bottom: 20px;
    }

    .no-results h3 {
        color: var(--light-text);
        margin: 0 0 15px 0;
        font-size: 1.3rem;
    }

    .no-results p {
        color: var(--dark-text);
        margin: 0 0 20px 0;
        font-size: 1rem;
    }

    .possible-reasons {
        background: rgba(220, 53, 69, 0.1);
        border: 1px solid rgba(220, 53, 69, 0.3);
        border-radius: 8px;
        padding: 20px;
        max-width: 500px;
    }

    .possible-reasons h4 {
        color: var(--light-text);
        margin: 0 0 10px 0;
        font-size: 1rem;
    }

    .possible-reasons ul {
        color: var(--dark-text);
        text-align: left;
        margin: 0;
        padding-left: 20px;
    }

    .possible-reasons li {
        margin-bottom: 5px;
    }

    /* Results Content */
    .results-content {
        padding: 25px;
    }

    /* Error Courses Section */
    .error-courses {
        background: linear-gradient(135deg, rgba(220, 53, 69, 0.1), rgba(220, 53, 69, 0.05));
        border: 1px solid rgba(220, 53, 69, 0.3);
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 25px;
    }

    .error-header {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 15px;
    }

    .error-header i {
        color: #dc3545;
        font-size: 1.2rem;
    }

    .error-header h3 {
        color: var(--light-text);
        margin: 0;
        font-size: 1.1rem;
    }

    .missing-courses-list {
        display: grid;
        gap: 10px;
    }

    .missing-course-item {
        background: rgba(220, 53, 69, 0.1);
        border: 1px solid rgba(220, 53, 69, 0.2);
        border-radius: 8px;
        padding: 12px 15px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .missing-course-item i {
        color: #dc3545;
        font-size: 1rem;
    }

    .missing-course-item span {
        color: var(--light-text);
        font-weight: 500;
        flex: 1;
    }

    .missing-course-item small {
        color: var(--dark-text);
        font-style: italic;
    }

    /* Summary Section */
    .results-summary {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 2px solid rgba(255, 255, 255, 0.1);
    }

    .summary-card {
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.05), rgba(74, 144, 226, 0.1));
        border-radius: 12px;
        padding: 20px;
        display: flex;
        align-items: center;
        gap: 15px;
        transition: all 0.3s ease;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .summary-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
    }

    .summary-card.available {
        border-color: rgba(40, 167, 69, 0.5);
        background: linear-gradient(135deg, rgba(40, 167, 69, 0.1), rgba(40, 167, 69, 0.05));
    }

    .summary-card.unavailable {
        border-color: rgba(220, 53, 69, 0.5);
        background: linear-gradient(135deg, rgba(220, 53, 69, 0.1), rgba(220, 53, 69, 0.05));
    }

    .summary-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: var(--light-blue);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.3rem;
    }

    .summary-card.available .summary-icon {
        background: #28a745;
    }

    .summary-card.unavailable .summary-icon {
        background: #dc3545;
    }

    .summary-info {
        flex: 1;
    }

    .summary-number {
        font-size: 1.8rem;
        font-weight: bold;
        color: var(--light-text);
        line-height: 1;
    }

    .summary-label {
        font-size: 0.9rem;
        color: var(--dark-text);
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .last-updated {
        grid-column: 1 / -1;
        text-align: center;
        color: var(--dark-text);
        font-style: italic;
        padding: 15px;
        background: rgba(255, 255, 255, 0.03);
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    /* Courses Grid */
    .courses-grid {
        display: grid;
        gap: 25px;
    }

    .course-card {
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.05), rgba(74, 144, 226, 0.05));
        border-radius: 15px;
        border: 1px solid rgba(74, 144, 226, 0.2);
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .course-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 12px 35px rgba(0, 0, 0, 0.15);
        border-color: rgba(74, 144, 226, 0.4);
    }

    .course-header {
        background: linear-gradient(135deg, var(--light-blue), #5a9bd4);
        padding: 20px 25px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        color: white;
    }

    .course-title {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .course-title i {
        font-size: 1.5rem;
    }

    .course-title h3 {
        margin: 0;
        font-size: 1.3rem;
        font-weight: 600;
    }

    .course-name {
        margin: 5px 0 0 0;
        font-size: 0.9rem;
        opacity: 0.9;
    }

    .availability-badge {
        background: rgba(255, 255, 255, 0.2);
        padding: 10px 15px;
        border-radius: 20px;
        text-align: center;
        min-width: 80px;
    }

    .availability-badge.has-seats {
        background: rgba(40, 167, 69, 0.8);
    }

    .availability-badge.no-seats {
        background: rgba(220, 53, 69, 0.8);
    }

    .badge-count {
        display: block;
        font-size: 1.1rem;
        font-weight: bold;
    }

    .badge-label {
        display: block;
        font-size: 0.8rem;
        text-transform: uppercase;
        opacity: 0.9;
    }

    /* Sections List */
    .sections-list {
        padding: 25px;
        display: grid;
        gap: 15px;
    }

    .section-item {
        background: rgba(255, 255, 255, 0.03);
        border-radius: 10px;
        padding: 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: all 0.3s ease;
        border-left: 4px solid transparent;
    }

    .section-item.available {
        border-left-color: #28a745;
        background: linear-gradient(135deg, rgba(40, 167, 69, 0.1), rgba(40, 167, 69, 0.05));
    }

    .section-item.full {
        border-left-color: #dc3545;
        background: linear-gradient(135deg, rgba(220, 53, 69, 0.1), rgba(220, 53, 69, 0.05));
    }

    .section-item:hover {
        transform: translateX(5px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .section-info {
        flex: 1;
    }

    .section-header {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 8px;
    }

    .section-header i {
        font-size: 1.1rem;
    }

    .section-item.available .section-header i {
        color: #28a745;
    }

    .section-item.full .section-header i {
        color: #dc3545;
    }

    .section-number {
        font-weight: 600;
        color: var(--light-text);
        font-size: 1rem;
    }

    .section-status {
        background: rgba(255, 255, 255, 0.1);
        padding: 3px 8px;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: bold;
        text-transform: uppercase;
    }

    .section-item.available .section-status {
        background: rgba(40, 167, 69, 0.2);
        color: #28a745;
    }

    .section-item.full .section-status {
        background: rgba(220, 53, 69, 0.2);
        color: #dc3545;
    }

    .instructor-info {
        display: flex;
        align-items: center;
        gap: 8px;
        color: var(--dark-text);
        font-size: 0.9rem;
    }

    .instructor-info i {
        color: var(--light-blue);
    }

    .seats-info {
        text-align: center;
        min-width: 70px;
    }

    .seats-count {
        font-size: 1.8rem;
        font-weight: bold;
        line-height: 1;
        margin-bottom: 5px;
    }

    .seats-count.available {
        color: #28a745;
    }

    .seats-count.full {
        color: #dc3545;
    }

    .seats-label {
        font-size: 0.8rem;
        color: var(--dark-text);
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    /* Responsive Design for Results */
    @@media (max-width: 768px) {
        .results-summary {
            grid-template-columns: repeat(2, 1fr);
        }

        .course-header {
            flex-direction: column;
            gap: 15px;
            text-align: center;
        }

        .section-item {
            flex-direction: column;
            gap: 15px;
            text-align: center;
        }
    }

    @@media (max-width: 480px) {
        .results-summary {
            grid-template-columns: 1fr;
        }

        .results-content {
            padding: 15px;
        }

        .course-header {
            padding: 15px 20px;
        }

        .sections-list {
            padding: 20px 15px;
        }
    }
</style>

<script>
    (function() {
        const isAuthenticated = @((isAuthenticated).ToString().ToLower());
        if (!isAuthenticated) {
            // Disable input elements and buttons related to monitoring
            const selectors = ['#section-dropdown', '#add-course-btn', '#startBtn', '#stopBtn', '#clear-cart', '#email-input'];
            selectors.forEach(s => {
                const el = document.querySelector(s);
                if (el) {
                    el.disabled = true;
                    el.classList.add('disabled-by-auth');
                }
            });

            // Dim the search section to indicate locked state
            const searchSection = document.querySelector('.search-section');
            if (searchSection) {
                searchSection.style.opacity = '0.5';
            }

            // Overlay already present; ensure it is visible
            const overlay = document.getElementById('auth-lock-overlay');
            if (overlay) {
                overlay.style.display = 'flex';
            }
        }
    })();
</script>

</body>
</html>