@{
    ViewData["Title"] = "Seat Moderation";
    Layout = null;
    var isAuthenticated = User?.Identity?.IsAuthenticated ?? false;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Scheds - Seat Moderation</title>
    <link rel="stylesheet" href="~/css/styles.css">
    <link rel="icon" type="image/png" href="~/images/abdo.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>

<body>
    @await Html.PartialAsync("_NavbarPartial")

    <div class="Container">
        <!-- Page Header -->
        <div class="page-header">
            <h1><i class="fas fa-bell"></i> Seat Monitoring</h1>
            <p>Monitor course seat availability and get notified when seats become available</p>
        </div>

        <!-- Main Content Grid -->
        <div class="content-grid">
            <!-- Left Column: Course Search & Cart -->
            <div class="left-column">
                <!-- Auth Lock Overlay -->
                @if (!isAuthenticated)
                {
                    <div class="auth-overlay">
                        <div class="auth-message">
                            <i class="fas fa-lock"></i>
                            <h3>Authentication Required</h3>
                            <p>Sign in with Google to access seat monitoring</p>
                            <a asp-controller="Account" asp-action="Login" class="btn-auth">
                                <i class="fab fa-google"></i> Sign in with Google
                            </a>
                        </div>
                    </div>
                }

                <!-- Course Search -->
                <div class="card">
                    <h2>Search Courses</h2>
                    <div class="search-box">
                        <i class="fas fa-search"></i>
                        <input id="course-search" type="search" placeholder="Search for courses..." />
                    </div>
                    <div id="search-results" class="search-results"></div>
                </div>

                <!-- Section Selection -->
                <div id="section-selection" class="card" style="display: none;">
                    <h3><span id="selected-course-name"></span></h3>
                    <div class="form-row">
                        <select id="section-dropdown" disabled>
                            <option value="">Select a section...</option>
                        </select>
                        <button id="add-course-btn" class="btn-primary" disabled>
                            <i class="fas fa-plus"></i> Add to Cart
                        </button>
                    </div>
                </div>

                <!-- Cart -->
                <div class="card">
                    <div class="card-header-row">
                        <h2>Monitoring Cart</h2>
                        <button id="clear-cart" class="btn-secondary-small">Unsubscribe from All</button>
                    </div>
                    <div id="cart-list" class="cart-list">
                        <div class="empty-state">
                            <i class="fas fa-shopping-cart"></i>
                            <p>No courses selected</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column: Controls & Results -->
            <div class="right-column">
                <!-- Monitoring Controls -->
                <div class="card">
                    <h2>Controls</h2>
                    <div class="controls-row">
                        <button id="startBtn" class="btn-primary">
                            <i class="fas fa-play"></i> Start Monitoring
                        </button>
                        <button id="stopBtn" class="btn-danger" style="display: none;">
                            <i class="fas fa-stop"></i> Stop Monitoring
                        </button>
                    </div>
                    <div id="statusText" class="status-text">Ready to monitor</div>
                </div>

                <!-- Results -->
                <div class="card results-card">
                    <h2><i class="fas fa-chart-bar"></i> Results</h2>
                    <div id="resultsContainer" class="results-container">
                        <div class="empty-state">
                            <i class="fas fa-inbox"></i>
                            <p>No results yet. Add courses and start monitoring.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // State Management
        let cartCourses = [];
        let pollingInterval = null;
        let isMonitoring = false;
        let searchTimeout = null;
        let selectedCourse = null;

        // DOM Elements
        const searchInput = document.getElementById('course-search');
        const searchResults = document.getElementById('search-results');
        const sectionSelection = document.getElementById('section-selection');
        const selectedCourseName = document.getElementById('selected-course-name');
        const sectionDropdown = document.getElementById('section-dropdown');
        const addCourseBtn = document.getElementById('add-course-btn');
        const cartList = document.getElementById('cart-list');
        const startBtn = document.getElementById('startBtn');
        const stopBtn = document.getElementById('stopBtn');
        const statusText = document.getElementById('statusText');
        const resultsContainer = document.getElementById('resultsContainer');
        const clearCartBtn = document.getElementById('clear-cart');

        // Initialize
        document.addEventListener('DOMContentLoaded', async function () {
            await loadCartItems();
            await loadActiveMonitoringJobs();
        });

        // Search Functionality
        searchInput.addEventListener('input', () => {
            const query = searchInput.value.trim();
            
            if (searchTimeout) clearTimeout(searchTimeout);
            
            if (!query || query.length <= 1) {
                searchResults.innerHTML = '';
                return;
            }

            searchTimeout = setTimeout(async () => {
                try {
                    const response = await fetch(`/api/coursebase/get-filtered-courses?query=${encodeURIComponent(query)}`);
                    const courses = await response.json();
                    displaySearchResults(courses);
                } catch (error) {
                    console.error('Search error:', error);
                    searchResults.innerHTML = '<div class="error-msg">Error loading courses</div>';
                }
            }, 500);
        });

        function displaySearchResults(courses) {
            if (!courses || courses.length === 0) {
                searchResults.innerHTML = '';
                return;
            }

            searchResults.innerHTML = courses.map(course => `
                <div class="search-result-item" onclick='selectCourse(${JSON.stringify(course)})'>
                    <strong>${course.courseCode}</strong>: ${course.courseName}
                </div>
            `).join('');
        }

        async function selectCourse(course) {
            selectedCourse = course;
            selectedCourseName.textContent = `${course.courseCode}: ${course.courseName}`;
            sectionSelection.style.display = 'block';
            searchResults.innerHTML = '';
            searchInput.value = '';

            sectionDropdown.innerHTML = '<option value="">Loading...</option>';
            sectionDropdown.disabled = true;
            addCourseBtn.disabled = true;

            try {
                const response = await fetch('/api/coursebase/get-course-sections', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ courseCode: course.courseCode })
                });
                const sections = await response.json();
                
                if (sections && sections.length > 0) {
                    sectionDropdown.innerHTML = '<option value="">Select a section...</option>' +
                        sections.map(s => `<option value="${s}">Section ${s}</option>`).join('');
                    sectionDropdown.disabled = false;
                } else {
                    sectionDropdown.innerHTML = '<option value="">No sections available</option>';
                }
            } catch (error) {
                console.error('Error loading sections:', error);
                sectionDropdown.innerHTML = '<option value="">Error loading sections</option>';
            }
        }

        sectionDropdown.addEventListener('change', function () {
            addCourseBtn.disabled = !this.value;
        });

        // Add to Cart
        addCourseBtn.addEventListener('click', async function () {
            const isAuthenticated = @((User?.Identity?.IsAuthenticated ?? false).ToString().ToLower());
            if (!isAuthenticated) {
                alert('Please sign in to add courses');
                return;
            }

            if (!selectedCourse || !sectionDropdown.value) return;

            const courseCode = selectedCourse.courseCode.toUpperCase();
            const section = sectionDropdown.value;

            if (cartCourses.some(c => c.courseCode === courseCode && c.section === section)) {
                alert('This course section is already in your cart');
                return;
            }

            try {
                const response = await fetch('/api/SeatModeration/cart/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ courseCode, section })
                });

                if (response.ok) {
                    await loadCartItems();
                    if (isMonitoring) await loadActiveMonitoringJobs();
                    
                    sectionSelection.style.display = 'none';
                    selectedCourse = null;
                    sectionDropdown.value = '';
                    addCourseBtn.disabled = true;
                } else {
                    alert('Error adding course');
                }
            } catch (error) {
                console.error('Error adding to cart:', error);
                alert('Error adding course');
            }
        });

        // Load Cart
        async function loadCartItems() {
            try {
                const response = await fetch('/api/SeatModeration/cart');
                
                if (response.ok) {
                    const result = await response.json();
                    if (result.success && result.cartItems) {
                        cartCourses = result.cartItems.map(item => ({
                            courseCode: item.courseCode,
                            section: item.section
                        }));
                        updateCartDisplay();
                    }
                } else if (response.status === 401) {
                    cartCourses = [];
                    updateCartDisplay();
                }
            } catch (error) {
                console.error('Error loading cart:', error);
            }
        }

        function updateCartDisplay() {
            if (cartCourses.length === 0) {
                cartList.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-shopping-cart"></i>
                        <p>No courses selected</p>
                    </div>
                `;
                startBtn.disabled = true;
                return;
            }

            cartList.innerHTML = cartCourses.map((course, index) => `
                <div class="cart-item">
                    <div class="cart-item-info">
                        <strong>${course.courseCode}</strong>
                        <span>Section ${course.section}</span>
                    </div>
                    <button class="btn-remove" onclick="removeFromCart(${index})" title="Remove">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `).join('');
            
            startBtn.disabled = false;
        }

        async function removeFromCart(index) {
            const course = cartCourses[index];
            
            try {
                const response = await fetch('/api/SeatModeration/cart/remove', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ courseCode: course.courseCode, section: course.section })
                });

                if (response.ok) {
                    await loadCartItems();
                    if (isMonitoring) await loadActiveMonitoringJobs();
                }
            } catch (error) {
                console.error('Error removing from cart:', error);
            }
        }

        clearCartBtn.addEventListener('click', async function () {
            const isAuthenticated = @((User?.Identity?.IsAuthenticated ?? false).ToString().ToLower());
            if (!isAuthenticated) {
                alert('Please sign in to manage your cart');
                return;
            }

            if (!confirm('Clear all courses from cart?')) return;

            try {
                const response = await fetch('/api/SeatModeration/cart/clear', { method: 'POST' });
                
                if (response.ok) {
                    await loadCartItems();
                    if (isMonitoring) {
                        const activeJobsResponse = await fetch('/api/SeatModeration/active-jobs');
                        if (activeJobsResponse.ok) {
                            const result = await activeJobsResponse.json();
                            if (!result.success || !result.activeJobs || result.activeJobs.length === 0) {
                                stopMonitoring();
                            } else {
                                await loadActiveMonitoringJobs();
                            }
                        }
                    }
                }
            } catch (error) {
                console.error('Error clearing cart:', error);
            }
        });

        // Monitoring Controls
        startBtn.addEventListener('click', async function () {
            const isAuthenticated = @((User?.Identity?.IsAuthenticated ?? false).ToString().ToLower());
            if (!isAuthenticated) {
                alert('Please sign in to start monitoring');
                return;
            }

            if (cartCourses.length === 0) {
                alert('Please add courses to your cart first');
                return;
            }

            isMonitoring = true;
            startBtn.style.display = 'none';
            stopBtn.style.display = 'inline-flex';
            statusText.textContent = 'Monitoring active...';
            statusText.className = 'status-text status-active';

            pollSeats();
            pollingInterval = setInterval(pollSeats, 60000);
        });

        stopBtn.addEventListener('click', function () {
            stopMonitoring();
        });

        function stopMonitoring() {
            isMonitoring = false;
            startBtn.style.display = 'inline-flex';
            stopBtn.style.display = 'none';
            statusText.textContent = 'Monitoring stopped';
            statusText.className = 'status-text status-inactive';

            if (pollingInterval) {
                clearInterval(pollingInterval);
                pollingInterval = null;
            }

            resultsContainer.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-pause-circle"></i>
                    <p>Monitoring stopped</p>
                </div>
            `;
        }

        // Load Active Jobs
        async function loadActiveMonitoringJobs() {
            try {
                const response = await fetch('/api/SeatModeration/active-jobs');
                
                if (response.ok) {
                    const result = await response.json();
                    if (result.success && result.activeJobs && result.activeJobs.length > 0) {
                        const convertedResults = result.activeJobs.map(job => ({
                            course: job.course,
                            courseName: job.courseName,
                            section: job.section,
                            hasSeats: job.hasSeats,
                            seatsLeft: job.seatsLeft,
                            instructor: job.instructor
                        }));
                        
                        displayResults({ success: true, results: convertedResults });
                        
                        isMonitoring = true;
                        statusText.textContent = `Monitoring ${result.activeJobs.length} course(s)`;
                        statusText.className = 'status-text status-active';
                        startBtn.style.display = 'none';
                        stopBtn.style.display = 'inline-flex';

                        if (!pollingInterval) {
                            pollingInterval = setInterval(pollActiveJobs, 60000);
                        }
                    }
                }
            } catch (error) {
                console.error('Error loading active jobs:', error);
            }
        }

        async function pollActiveJobs() {
            try {
                const response = await fetch('/api/SeatModeration/active-jobs');
                
                if (response.ok) {
                    const result = await response.json();
                    if (result.success && result.activeJobs) {
                        const convertedResults = result.activeJobs.map(job => ({
                            course: job.course,
                            courseName: job.courseName,
                            section: job.section,
                            hasSeats: job.hasSeats,
                            seatsLeft: job.seatsLeft,
                            instructor: job.instructor
                        }));
                        displayResults({ success: true, results: convertedResults });
                    }
                }
            } catch (error) {
                console.error('Error polling active jobs:', error);
            }
        }

        async function pollSeats() {
            if (!isMonitoring) return;

            try {
                statusText.textContent = 'Checking seats...';

                const courseCodes = cartCourses.map(c => c.courseCode);
                const sections = cartCourses.map(c => c.section);

                const response = await fetch('/api/SeatModeration/check-seats', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ courseCode: courseCodes, sections })
                });

                if (response.ok) {
                    const data = await response.json();
                    const results = Array.isArray(data) ? data : (data.results || []);
                    displayResults({ success: true, results });
                    statusText.textContent = `Last checked: ${new Date().toLocaleTimeString()}`;
                }
            } catch (error) {
                console.error('Polling error:', error);
                statusText.textContent = 'Error checking seats';
            }
        }

        // Display Results
        function displayResults(data) {
            if (!data.success || !data.results || data.results.length === 0) {
                resultsContainer.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-inbox"></i>
                        <p>No results available</p>
                    </div>
                `;
                return;
            }

            const groupedResults = {};
            data.results.forEach(result => {
                if (!groupedResults[result.course]) {
                    groupedResults[result.course] = {
                        courseCode: result.course,
                        courseName: result.courseName,
                        sections: []
                    };
                }
                groupedResults[result.course].sections.push(result);
            });

            const availableCount = data.results.filter(r => r.hasSeats || r.seatsLeft > 0).length;
            const totalCount = data.results.length;

            let html = `
                <div class="results-summary">
                    <div class="summary-item summary-available">
                        <div class="summary-number">${availableCount}</div>
                        <div class="summary-label">Available</div>
                    </div>
                    <div class="summary-item summary-full">
                        <div class="summary-number">${totalCount - availableCount}</div>
                        <div class="summary-label">Full</div>
                    </div>
                </div>
                <div class="courses-list">
            `;

            Object.values(groupedResults).forEach(course => {
                const availableSections = course.sections.filter(s => s.hasSeats || s.seatsLeft > 0).length;
                
                html += `
                    <div class="course-block">
                        <div class="course-header">
                            <div>
                                <h3>${course.courseCode}</h3>
                                <p>${course.courseName}</p>
                            </div>
                            <div class="badge ${availableSections > 0 ? 'badge-success' : 'badge-danger'}">
                                ${availableSections}/${course.sections.length} Available
                            </div>
                        </div>
                        <div class="sections-list">
                `;

                course.sections.forEach(section => {
                    const hasSeats = section.hasSeats || section.seatsLeft > 0;
                    html += `
                        <div class="section-row ${hasSeats ? 'section-available' : 'section-full'}">
                            <div class="section-info">
                                <span class="section-number">Section ${section.section}</span>
                                <span class="section-instructor">${section.instructor || 'TBA'}</span>
                            </div>
                            <div class="section-seats">
                                <span class="seats-number ${hasSeats ? 'seats-available' : 'seats-full'}">
                                    ${section.seatsLeft}
                                </span>
                                <span class="seats-label">seats</span>
                            </div>
                            <button class="btn-unsubscribe" onclick="unsubscribeFromJob('${section.course}', '${section.section}')">
                                <i class="fas fa-bell-slash"></i> Unsubscribe
                            </button>
                        </div>
                    `;
                });

                html += `
                        </div>
                    </div>
                `;
            });

            html += '</div>';
            resultsContainer.innerHTML = html;
        }

        async function unsubscribeFromJob(courseCode, section) {
            if (!confirm(`Stop monitoring ${courseCode} Section ${section}?`)) return;
            
            try {
                const courseSection = `${courseCode}_${section}`;
                
                const response = await fetch('/api/SeatModeration/unsubscribe', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ courseSections: [courseSection] })
                });

                if (response.ok) {
                    await fetch('/api/SeatModeration/cart/remove', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ courseCode, section })
                    });
                    
                    window.location.reload();
                } else {
                    alert('Error unsubscribing');
                }
            } catch (error) {
                console.error('Error unsubscribing:', error);
                alert('Error occurred');
            }
        }
    </script>

    <style>
        /* Layout */
        .page-header {
            text-align: center;
            margin: 40px 0;
            color: var(--light-text);
        }

        .page-header h1 {
            font-size: 2.5rem;
            margin: 0 0 10px 0;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
        }

        .page-header h1 i {
            color: var(--light-blue);
        }

        .page-header p {
            color: var(--dark-text);
            font-size: 1.1rem;
            margin: 0;
        }

        .content-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 40px;
        }

        /* Cards */
        .card {
            background: var(--lighter-dark);
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .card h2 {
            color: var(--light-text);
            font-size: 1.4rem;
            margin: 0 0 20px 0;
        }

        .card h3 {
            color: var(--light-text);
            font-size: 1.1rem;
            margin: 0 0 15px 0;
        }

        .card-header-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .card-header-row h2 {
            margin: 0;
        }

        /* Search */
        .search-box {
            position: relative;
            margin-bottom: 15px;
        }

        .search-box i {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--dark-text);
        }

        .search-box input {
            width: 100%;
            padding: 12px 12px 12px 45px;
            background: var(--dark);
            border: 2px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            color: var(--light-text);
            font-size: 1rem;
            transition: border-color 0.3s;
        }

        .search-box input:focus {
            outline: none;
            border-color: var(--light-blue);
        }

        .search-results {
            max-height: 300px;
            overflow-y: auto;
        }

        .search-result-item {
            padding: 12px;
            background: var(--dark);
            border-radius: 6px;
            margin-bottom: 8px;
            cursor: pointer;
            transition: background 0.2s;
            color: var(--light-text);
        }

        .search-result-item:hover {
            background: var(--light-blue);
        }

        /* Form Elements */
        .form-row {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .form-row select {
            flex: 1;
            padding: 10px;
            background: var(--dark);
            border: 2px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            color: var(--light-text);
            font-size: 1rem;
        }

        .form-row select:focus {
            outline: none;
            border-color: var(--light-blue);
        }

        /* Buttons */
        .btn-primary, .btn-danger, .btn-auth {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s;
        }

        .btn-primary {
            background: var(--light-blue);
            color: white;
        }

        .btn-primary:hover {
            background: var(--dark-blue);
        }

        .btn-primary:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
        }

        .btn-auth {
            background: #4285f4;
            color: white;
            text-decoration: none;
        }

        .btn-auth:hover {
            background: #3367d6;
        }

        .btn-secondary-small {
            padding: 6px 12px;
            background: transparent;
            border: 1px solid var(--dark-text);
            color: var(--dark-text);
            border-radius: 6px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s;
        }

        .btn-secondary-small:hover {
            background: #dc3545;
            border-color: #dc3545;
            color: white;
        }

        .btn-remove {
            padding: 6px 10px;
            background: transparent;
            border: none;
            color: var(--dark-text);
            cursor: pointer;
            border-radius: 4px;
            transition: all 0.2s;
        }

        .btn-remove:hover {
            background: #dc3545;
            color: white;
        }

        .btn-unsubscribe {
            padding: 6px 10px;
            background: #dc3545;
            border: none;
            color: white;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 4px;
            transition: all 0.2s;
        }

        .btn-unsubscribe:hover {
            background: #c82333;
        }

        /* Cart */
        .cart-list {
            max-height: 400px;
            overflow-y: auto;
        }

        .cart-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px;
            background: var(--dark);
            border-radius: 6px;
            margin-bottom: 8px;
        }

        .cart-item-info {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .cart-item-info strong {
            color: var(--light-text);
            font-size: 1rem;
        }

        .cart-item-info span {
            color: var(--dark-text);
            font-size: 0.9rem;
        }

        /* Controls */
        .controls-row {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        .status-text {
            padding: 10px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 6px;
            text-align: center;
            color: var(--dark-text);
            font-size: 0.95rem;
        }

        .status-active {
            color: #28a745;
            font-weight: 600;
        }

        .status-inactive {
            color: #6c757d;
        }

        /* Results */
        .results-card {
            min-height: 500px;
        }

        .results-container {
            min-height: 400px;
        }

        .results-summary {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }

        .summary-item {
            background: rgba(255, 255, 255, 0.05);
            padding: 20px;
            border-radius: 8px;
            text-align: center;
        }

        .summary-item.summary-available {
            border-left: 4px solid #28a745;
        }

        .summary-item.summary-full {
            border-left: 4px solid #dc3545;
        }

        .summary-number {
            font-size: 2rem;
            font-weight: bold;
            color: var(--light-text);
            margin-bottom: 5px;
        }

        .summary-label {
            color: var(--dark-text);
            font-size: 0.9rem;
            text-transform: uppercase;
        }

        .courses-list {
            display: grid;
            gap: 20px;
        }

        .course-block {
            background: rgba(255, 255, 255, 0.03);
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            overflow: hidden;
        }

        .course-header {
            background: var(--light-blue);
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: white;
        }

        .course-header h3 {
            margin: 0 0 5px 0;
            font-size: 1.2rem;
            color: white;
        }

        .course-header p {
            margin: 0;
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 600;
        }

        .badge-success {
            background: rgba(40, 167, 69, 0.3);
        }

        .badge-danger {
            background: rgba(220, 53, 69, 0.3);
        }

        .sections-list {
            padding: 15px;
        }

        .section-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px;
            border-radius: 6px;
            margin-bottom: 8px;
            border-left: 3px solid transparent;
        }

        .section-available {
            background: rgba(40, 167, 69, 0.1);
            border-left-color: #28a745;
        }

        .section-full {
            background: rgba(220, 53, 69, 0.1);
            border-left-color: #dc3545;
        }

        .section-info {
            display: flex;
            flex-direction: column;
            gap: 4px;
            flex: 1;
        }

        .section-number {
            color: var(--light-text);
            font-weight: 600;
        }

        .section-instructor {
            color: var(--dark-text);
            font-size: 0.9rem;
        }

        .section-seats {
            display: flex;
            align-items: baseline;
            gap: 5px;
            margin: 0 15px;
        }

        .seats-number {
            font-size: 1.5rem;
            font-weight: bold;
        }

        .seats-available {
            color: #28a745;
        }

        .seats-full {
            color: #dc3545;
        }

        .seats-label {
            color: var(--dark-text);
            font-size: 0.85rem;
        }

        /* Empty States */
        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: var(--dark-text);
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 15px;
            opacity: 0.5;
        }

        .empty-state p {
            margin: 0;
            font-size: 1rem;
        }

        /* Auth Overlay */
        .auth-overlay {
            position: fixed;
            inset: 0;
            z-index: 1000;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(4px);
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .auth-message {
            background: var(--lighter-dark);
            padding: 40px;
            border-radius: 12px;
            text-align: center;
            max-width: 400px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .auth-message i {
            font-size: 3rem;
            color: #dc3545;
            margin-bottom: 20px;
        }

        .auth-message h3 {
            color: var(--light-text);
            margin: 0 0 10px 0;
        }

        .auth-message p {
            color: var(--dark-text);
            margin: 0 0 20px 0;
        }

        /* Scrollbars */
        .search-results::-webkit-scrollbar,
        .cart-list::-webkit-scrollbar {
            width: 6px;
        }

        .search-results::-webkit-scrollbar-thumb,
        .cart-list::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 3px;
        }


            .content-grid {
                gap: 20px;
            }

            .card {
                padding: 20px;
            }

            .form-row {
                flex-direction: column;
            }

            .form-row select {
                width: 100%;
            }

            .results-summary {
                grid-template-columns: 1fr;
            }

            .section-row {
                flex-direction: column;
                gap: 10px;
                align-items: flex-start;
            }

            .section-seats {
                margin: 0;
            }
        }
    </style>

    <script>
        // Disable elements for unauthenticated users
        @if (!isAuthenticated)
        {
            <text>
            document.addEventListener('DOMContentLoaded', function() {
                const elementsToDisable = ['#course-search', '#section-dropdown', '#add-course-btn', '#startBtn', '#stopBtn', '#clear-cart'];
                elementsToDisable.forEach(selector => {
                    const el = document.querySelector(selector);
                    if (el) el.disabled = true;
                });
            });
            </text>
        }
    </script>
</body>

</html>
